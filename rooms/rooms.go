// Copyright 2022 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package model provides definitions for all input
// and output parameters types found in DocuSign's
// OpenAPI (swagger) file.
//
// Api documentation may be found at:
// https://developers.docusign.com/docs/rooms-api/reference
package rooms // import "github.com/jfcote87/esign/rooms

// For more infomation on how to use scopes, see https://developers.docusign.com/docs/rooms-api/rooms101/auth/
const (
	// OAuthScopeRead authorizes reading DocuSign Rooms data
	OAuthScopeRead = "dtr.rooms.read"
	// OAuthScopeWrite authorizes updating DocuSign Room data
	OAuthScopeWrite = "dtr.rooms.write"
	// OAuthScopeDocumentsRead authorizes reading of documents from DocuSign Rooms
	OAuthScopeDocumentsRead = "dtr.documents.read"
	// OAuthScopeDocumentsWrite authorizes writing documents to DocuSign Rooms
	OAuthScopeDocumentsWrite = "dtr.documents.write"
	// OAuthScopeProfileRead authorizes reading of profile data for accounts or signers associated with your company
	OAuthScopeProfileRead = "dtr.profile.read"
	// OAuthScopeProfileWrite authorizes writing profile data to accounts or signers associated with your company
	OAuthScopeProfileWrite = "dtr.profile.write"
	// OAuthScopeCompanyRead authorizes reading information from all rooms and profiles associated with your company
	OAuthScopeCompanyRead = "dtr.company.read"
	// OAuthScopeCompanyWrite authorizes writing information to all rooms and profiles associated with your company
	OAuthScopeCompanyWrite = "dtr.company.write"
	// OAuthScopeForms authorizes use of endpoints related to the Forms feature
	OAuthScopeForms = "room_forms"
)

// AccessLevel not described in definition file
type AccessLevel struct {
}

// AccountStatus not described in definition file
type AccountStatus struct {
}

// AccountSummary contains details about a company account.
type AccountSummary struct {
	// The ID of the company.
	CompanyID int32 `json:"companyId,omitempty"`
	// The version of Rooms that the company uses. This property is read-only. Possible values are:
	//
	// - `v6`: Rooms Version 6.
	CompanyVersion string `json:"companyVersion,omitempty"`
	// The ID of the company's default field set. A field set is a set of data fields and the information about those data fields that the system uses to configure rooms. It corresponds to the **Admin > Company > Room Details** area in the console.
	DefaultFieldSetID string `json:"defaultFieldSetId,omitempty"`
	// The globally-unique identifier (GUID) for the DocuSign Rooms account.
	DocuSignAccountGUID string `json:"docuSignAccountGuid,omitempty"`
	// The name of the company.
	Name string `json:"name,omitempty"`
	//
	RequireOfficeLibraryAssignments bool `json:"requireOfficeLibraryAssignments,omitempty"`
}

// ActivityType details about an activity type.
type ActivityType struct {
	// The ID of the activity type.
	//
	// Example: `movefrominbx`
	ActivityTypeID string `json:"activityTypeId,omitempty"`
	// The name of the activity type.
	//
	// Example: `Document Moved from Inbox`
	Name string `json:"name,omitempty"`
}

// APIError this object describes errors that occur. It is valid only for responses and ignored in requests.
type APIError struct {
	// The code associated with the error condition.
	ErrorCode string `json:"errorCode,omitempty"`
	// A brief message describing the error condition.
	Message string `json:"message,omitempty"`
	//
	ReferenceID string `json:"referenceId,omitempty"`
}

// AssignableRoles this complex type contains information about assignable roles.
type AssignableRoles struct {
	// The ID of the invitee's company-level role. This property lets the requester know what room-level role will give the user the same permissions that they have at the company level. A value is returned only when both the requester and the invitee are internal to the company.
	CurrentRoleID int32 `json:"currentRoleId,omitempty"`
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// An array of `role` objects.
	Roles []RoleSummary `json:"roles,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// ClassicManagerPermissions this object contains details about user permissions. These permissions are associated only with Rooms v5.
type ClassicManagerPermissions struct {
	// When **true,** the user is automatically added to new company rooms and is visible in those rooms.
	AutoAccessToCompanyRooms bool `json:"autoAccessToCompanyRooms,omitempty"`
	// When **true,** the user can approve company checklists.
	CanApproveCompanyChecklists bool `json:"canApproveCompanyChecklists,omitempty"`
	// When **true,** the user can close company rooms.
	CanCloseCompanyRooms bool `json:"canCloseCompanyRooms,omitempty"`
	// When **true,** the user can delete company documents.
	CanDeleteCompanyDocuments bool `json:"canDeleteCompanyDocuments,omitempty"`
	// When **true,** the user can delete company rooms.
	CanDeleteCompanyRooms bool `json:"canDeleteCompanyRooms,omitempty"`
	// When **true,** the user can manage the company's account.
	CanManageCompanyAccount bool `json:"canManageCompanyAccount,omitempty"`
	// When **true,** the user can manage other users on the company's account.
	CanManageCompanyMembers bool `json:"canManageCompanyMembers,omitempty"`
	// When **true,** the user can manage company rooms.
	CanManageCompanyRooms bool `json:"canManageCompanyRooms,omitempty"`
	// When **true,** the user can manage the company's shared library.
	CanManageCompanySharedLibrary bool `json:"canManageCompanySharedLibrary,omitempty"`
	// When **true,** the user is a system administrator for the company.
	IsCompanySystemAdmin bool `json:"isCompanySystemAdmin,omitempty"`
	// When **true,** the user is an office manager.
	IsOfficeManager bool `json:"isOfficeManager,omitempty"`
	// When **true,** the user is a region manager.
	IsRegionManager bool `json:"isRegionManager,omitempty"`
	// When **true,** the user is visible in company rooms.
	//
	// **Note:** Inherited managers are automatically added to rooms and are visible in those rooms unless this setting is set to **false.** Inherited managers are users who oversee others and have the **auto-access to rooms of members the user manages** permission enabled.
	IsVisibleInTransactionRooms bool `json:"isVisibleInTransactionRooms,omitempty"`
}

// ClosingStatus contains information about a closing status, or reason for closing a room.
type ClosingStatus struct {
	// The ID of the closing status.
	//
	// Example: `exp`
	ClosingStatusID string `json:"closingStatusId,omitempty"`
	// The name of the closing status.
	//
	// Example: `Listing Expired`
	Name string `json:"name,omitempty"`
}

// ContactSide details about a contact side.
type ContactSide struct {
	// The ID of the contact side.
	//
	// Example: `L`
	ContactSideID string `json:"contactSideId,omitempty"`
	// The name of the contact side.
	//
	// Example: `Listing`
	Name string `json:"name,omitempty"`
}

// Country contains details about a supported country.
type Country struct {
	// The two-letter code for the country.
	//
	// Example: `NZ`
	CountryID string `json:"countryId,omitempty"`
	// The name of the country.
	//
	// Example: `New Zealand`
	Name string `json:"name,omitempty"`
}

// Currency contains details about a supported currency.
type Currency struct {
	// The three-letter code for the currency.
	//
	// Example: `CAD`
	CurrencyID string `json:"currencyId,omitempty"`
	// The name of the currency.
	//
	// Example: `Canadian Dollar`
	Name string `json:"name,omitempty"`
}

// CustomData contains information about whether the field is required when a room is created or submitted for review.
type CustomData struct {
	// When **true,** the field is required when a new room is created.
	IsRequiredOnCreate bool `json:"isRequiredOnCreate,omitempty"`
	// When **true,** the field is required when a room is submitted for review.
	IsRequiredOnSubmit bool `json:"isRequiredOnSubmit,omitempty"`
}

// DependsOn contains information about a parent field on which this field depends.
type DependsOn struct {
	// The child field action that depends on the parent field.
	//
	// Example: `visibility`
	//
	// For example, in the console, you must select a country for a list of states to become visible.
	ActionType string `json:"actionType,omitempty"`
	// The name that the Rooms API uses for the parent field.
	//
	// Example: `country`
	ParentAPIName string `json:"parentApiName,omitempty"`
}

// DesignatedOffice this object contains information about the office that you want to add a member to or remove a member from.
type DesignatedOffice struct {
	// (Required) The ID of the office. This is the ID that the system generated when you created the office.
	OfficeID int32 `json:"officeId,omitempty"`
}

// DesignatedRegion this object contains information about the region associated with the member.
type DesignatedRegion struct {
	// (Required) The ID of the region. This is the ID that the system generated when you created the region.
	RegionID int32 `json:"regionId,omitempty"`
}

// Document information about a document. This object is read-only when used as a response.
type Document struct {
	// In a response, when the query parameter `includeContents` is **true,** the base64-encoded contents of the document.
	//
	// In a request, the base64-encoded contents of the document to add.
	Base64Contents string `json:"base64Contents,omitempty"`
	//
	ContentType string `json:"contentType,omitempty"`
	// The UTC DateTime when the document was created.
	//
	// Example: `2019-07-25T22:18:56.95Z`
	CreatedDate string `json:"createdDate,omitempty"`
	// The ID of the document.
	DocumentID int32 `json:"documentId,omitempty"`
	// The ID of the folder the document is in.
	FolderID int32 `json:"folderId,omitempty"`
	//
	IsDynamic bool `json:"isDynamic,omitempty"`
	// **True** if the document is signed.
	IsSigned bool `json:"isSigned,omitempty"`
	// The name of the document.
	Name string `json:"name,omitempty"`
	// The ID of the user who owns the document.
	OwnerID int32 `json:"ownerId,omitempty"`
	// The ID of the room the document belongs to.
	RoomID int32 `json:"roomId,omitempty"`
	// The size of the document in bytes. This is the number of bytes in the _decoded_ document, not the size of `base64Contents`.
	Size int64 `json:"size,omitempty"`
}

// DocumentUser not described in definition file
type DocumentUser struct {
	// **True** if the user `userId` has can approve a task for this document.
	CanApproveTask bool `json:"canApproveTask,omitempty"`
	// **True** if the user `userId` can assign this document to a task list.
	CanAssignToTaskList bool `json:"canAssignToTaskList,omitempty"`
	// **True** if the user `userId` can make a copy of this document.
	CanCopy bool `json:"canCopy,omitempty"`
	// **True** if the user `userId` can delete this document.
	CanDelete bool `json:"canDelete,omitempty"`
	// **True** if the user `userId` can remove approval for this document.
	CanRemoveApproval bool `json:"canRemoveApproval,omitempty"`
	// **True** if the user `userId` can remove this document from a task list.
	CanRemoveFromTaskList bool `json:"canRemoveFromTaskList,omitempty"`
	// **True** if the user `userId` can rename this document.
	CanRename bool `json:"canRename,omitempty"`
	// **True** if the user `userId` can share this document.
	CanShare bool `json:"canShare,omitempty"`
	// **True** if the user `userId` can view activity on this document.
	CanViewActivity bool `json:"canViewActivity,omitempty"`
	// The ID of the document.
	DocumentID int32 `json:"documentId,omitempty"`
	// **True** if the user `userId` has access to this document.
	HasAccess bool `json:"hasAccess,omitempty"`
	// The file name associated with the document.
	Name string `json:"name,omitempty"`
	// The ID of the user.
	UserID int32 `json:"userId,omitempty"`
}

// DocumentUserForCreate not described in definition file
type DocumentUserForCreate struct {
	// The ID of the user.
	UserID int32 `json:"userId,omitempty"`
}

// ESignAccountRoleSettings this object contains details about the permissions associated with a eSignature permission profile.
type ESignAccountRoleSettings struct {
	// A Boolean specifying whether users with this eSignature permission profile can manage the Rooms account. This property is read-only and has the following values:
	//
	// - `DS Admin` permission profile: **true**
	// - `DS Sender` permission profile: **false**
	// - `DS Viewer` permission profile: **false**
	//
	//
	//
	//
	//
	AllowAccountManagement bool `json:"allowAccountManagement,omitempty"`
}

// ESignPermissionProfile when an administrator or authorized member invites a new user to become an account member, the system also creates an eSignature account for the invitee at the same time. This object contains information about the eSignature permission profile, which controls member access to the eSignature account.
type ESignPermissionProfile struct {
	// When an administrator or authorized member invites a new user to become an account member, the system also creates an eSignature account for the invitee at the same time. The `eSignPermissionProfileId` is the ID of the eSignature permission set to assign to the member.
	ESignPermissionProfileID string `json:"eSignPermissionProfileId,omitempty"`
	// The name of the eSignature permission profile. Valid values are:
	Name string `json:"name,omitempty"`
	// the eSignature account role settings associated with the permission profile.
	Settings *ESignAccountRoleSettings `json:"settings,omitempty"`
}

// ESignPermissionProfileList this object contains a list of eSignature permission profiles.
type ESignPermissionProfileList struct {
	// An array of eSignature `permissionProfile` objects.
	PermissionProfiles []ESignPermissionProfile `json:"permissionProfiles,omitempty"`
}

// Envelope not described in definition file
type Envelope struct {
	//
	ESignEnvelopeID string `json:"eSignEnvelopeId,omitempty"`
}

// EnvelopeForCreate not described in definition file
type EnvelopeForCreate struct {
	//
	DocumentIds []int `json:"documentIds,omitempty"`
	//
	EnvelopeName string `json:"envelopeName,omitempty"`
}

// ExternalFormFillSession this resource provides a method that returns a URL for a new external form fill session, based on the `roomId` and `formId` that you specify in the `formFillSessionForCreate` request body.
type ExternalFormFillSession struct {
	//
	URL string `json:"url,omitempty"`
}

// ExternalFormFillSessionForCreate contains the details required to create a form fill session.
type ExternalFormFillSessionForCreate struct {
	// (Required) The ID of the form.
	//
	// Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
	//
	FormID string `json:"formId,omitempty"`
	//
	FormIds []string `json:"formIds,omitempty"`
	// (Required) The ID of the room.
	RoomID int32 `json:"roomId,omitempty"`
	// (Optional) This property specifies the origin on which the page is allowed to display in a frame.
	XFrameAllowedURL string `json:"xFrameAllowedUrl,omitempty"`
}

// Field contains details about a field in a field set.
type Field struct {
	// The name that the Rooms API uses for the field.
	//
	// Example: `companyContactName`
	//
	// **Note:** When you create a new room, you use the `apiName` values for fields to specify the details that you want to appear on the room's **Details** tab.
	APIName string `json:"apiName,omitempty"`
	// Contains information about how the field is configured, such as the maximum length.
	Configuration *FieldConfiguration `json:"configuration,omitempty"`
	// Contains information about whether the field is required when a room is created or submitted for review.
	CustomData *CustomData `json:"customData,omitempty"`
	// The ID of the DocuSign field definition from which this field derives. When an Admin user configures a field set by using the API, this is the ID that they use to add this field definition to the field set. The original field definition associated with this ID contains more information about the field, such as the default title, default API name, and configurations such as the maximum length or the maximum value allowed.
	FieldDefinitionID string `json:"fieldDefinitionId,omitempty"`
	// An ID that uniquely identifies the instance of a `fieldDefinition` within a field set.
	FieldID string `json:"fieldId,omitempty"`
	// An array of subfields.
	Fields []Field `json:"fields,omitempty"`
	// The human-readable title or name of the field.
	//
	// Example: `Company contact name`
	Title string `json:"title,omitempty"`
	// The type of field. Valid values:
	//
	// - `Date`
	// - `Text`
	// - `Checkbox`
	// - `Currency`
	// - `Numeric`
	// - `SelectList`
	// - `TextArea`
	// - `Percentage`
	// - `Integer`
	//
	//
	Type string `json:"type,omitempty"`
}

// FieldConfiguration contains details about how a field is configured.
type FieldConfiguration struct {
	// This property applies to child fields. It contains information about the parent field that must have a value set in order for this field to have a value. For example, you must specify a country before you can select a state.
	DependsOn []DependsOn `json:"dependsOn,omitempty"`
	// When **true,** the field is a parent field on which one or more child fields depend.
	IsPublisher bool `json:"isPublisher,omitempty"`
	// The maximum length of the field.
	MaxLength int32 `json:"maxLength,omitempty"`
	// The maximum value allowed for the field.
	MaxValue float64 `json:"maxValue,omitempty"`
	// The minimum length of the field.
	MinLength int32 `json:"minLength,omitempty"`
	// The minimum value allowed for the field.
	MinValue float64 `json:"minValue,omitempty"`
	// This property is used for validation. When you set a number value for this property, the value for the field must be a multiple of it.
	MultipleOf float64 `json:"multipleOf,omitempty"`
	// An array of options in a list.
	Options []SelectListFieldOption `json:"options,omitempty"`
	// The regular expression pattern to use to validate the value of the field.
	Pattern string `json:"pattern,omitempty"`
}

// FieldData is the field data associated with a room.
// See [Rooms: GetRoomFieldData](/docs/rooms-api/reference/rooms/rooms/getroomfielddata/).
type FieldData struct {
	// Field data is a collection of name/value pairs where the names correspond to the fields in the room's **Details** tab. The value of a name/value pair can be a field data collection itself. These collections are implemented as JSON objects.
	//
	// The fields `address1`, `state`, `postalCode`, and `city` are required. The `state` value must be a `stateId` value returned by the [getStates](/docs/rooms-api/reference/globalresources/states/getstates/) endpoint. For example, use "US-WA" instead of "Washington".
	//
	// For example, the data for fields named "Tax annual amount" and "buyer1" (along with the required fields) might look like this:
	//
	// ```
	// {
	//   "data": {
	//     "taxAnnualAmount": 3389.12,
	//     "buyer1": {
	//       "name": "Elle Woods",
	//       "homePhone": "123-456-7890",
	//       "state": "US-CA",
	//       "email": "elle.woods@harvard.edu"
	//     },
	//     "address1": "123 Harvard Street",
	//     "state": "US-MA",
	//     "postalCode": "02138",
	//     "city": "Cambridge"
	//   }
	// }
	// ```
	//
	Data map[string]interface{} `json:"data,omitempty"`
}

// FieldDataForCreate contains key-value pairs that specify the properties of the room and their values.
type FieldDataForCreate struct {
	// Field data is a collection of name/value pairs where the names correspond to the fields in the room's **Details** tab. The value of a name/value pair can be a field data collection itself. These collections are implemented as JSON objects.
	//
	// The fields `address1`, `state`, `postalCode`, and `city` are required. The `state` value must be a `stateId` value returned by the [getStates](/docs/rooms-api/reference/globalresources/states/getstates/) endpoint. For example, use "US-WA" instead of "Washington".
	//
	// For example, the data for fields named "Tax annual amount" and "buyer1" (along with the required fields) might look like this:
	//
	// ```
	// {
	//   "data": {
	//     "taxAnnualAmount": 3389.12,
	//     "buyer1": {
	//       "name": "Elle Woods",
	//       "homePhone": "123-456-7890",
	//       "state": "US-CA",
	//       "email": "elle.woods@harvard.edu"
	//     },
	//     "address1": "123 Harvard Street",
	//     "state": "US-MA",
	//     "postalCode": "02138",
	//     "city": "Cambridge"
	//   }
	// }
	// ```
	//
	Data map[string]interface{} `json:"data,omitempty"`
}

// FieldDataForUpdate is the field data to update. When updating field data, specify only the fields being updated.
type FieldDataForUpdate struct {
	// Field data is a collection of name/value pairs where the names correspond to the fields in the room's **Details** tab. The value of a name/value pair can be a field data collection itself. These collections are implemented as JSON objects.
	//
	// The fields `address1`, `state`, `postalCode`, and `city` are required. The `state` value must be a `stateId` value returned by the [getStates](/docs/rooms-api/reference/globalresources/states/getstates/) endpoint. For example, use "US-WA" instead of "Washington".
	//
	// For example, the data for fields named "Tax annual amount" and "buyer1" (along with the required fields) might look like this:
	//
	// ```
	// {
	//   "data": {
	//     "taxAnnualAmount": 3389.12,
	//     "buyer1": {
	//       "name": "Elle Woods",
	//       "homePhone": "123-456-7890",
	//       "state": "US-CA",
	//       "email": "elle.woods@harvard.edu"
	//     },
	//     "address1": "123 Harvard Street",
	//     "state": "US-MA",
	//     "postalCode": "02138",
	//     "city": "Cambridge"
	//   }
	// }
	// ```
	//
	Data map[string]interface{} `json:"data,omitempty"`
}

// FieldSet contains details about a field set.
type FieldSet struct {
	// The ID of the field set.
	//
	// Example: `4aef602b-xxxx-xxxx-xxxx-08d76696f678`
	//
	FieldSetID string `json:"fieldSetId,omitempty"`
	// An array of fields.
	Fields []Field `json:"fields,omitempty"`
	// The title or name of the field set.
	Title string `json:"title,omitempty"`
}

// FieldsCustomDataFilterType not described in definition file
type FieldsCustomDataFilterType struct {
}

// FinancingType this resource provides a method that enables you to retrieve a list of financing types.
type FinancingType struct {
	// The ID of the financing type.
	//
	// Example: `conv` (for `Conventional`)
	FinancingTypeID string `json:"financingTypeId,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
}

// FormDetails this resource contains details about a form, such as the date it was created and last updated, the number of pages, the form owner, and other information.
type FormDetails struct {
	// The UTC DateTime when the form was made available or published. (It is possible for a form to be published but not yet available.)
	AvailableOnDate string `json:"availableOnDate,omitempty"`
	// The UTC date and time when the item was created. This is a read-only value that the service assigns.
	//
	// Example: `2019-07-17T17:45:42.783Z`
	//
	//
	CreatedDate string `json:"createdDate,omitempty"`
	// The ID of the form.
	//
	// Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
	//
	FormID string `json:"formId,omitempty"`
	// The UTC date and time when the item was last updated. This is a read-only value that the service assigns.
	//
	// Example: 2019-07-17T17:45:42.783Z
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`
	// The name of the form.
	//
	// Example: `MORe Private Network Addendum`
	Name string `json:"name,omitempty"`
	// The number of pages in the form.
	//
	// Example: `2`
	NumberOfPages int32 `json:"numberOfPages,omitempty"`
	// The name of the organization that owns the form.
	//
	// Example: `Mainstreet organization of Realtors`
	OwnerName string `json:"ownerName,omitempty"`
	// The version of the form.
	//
	// Example: `1`
	Version string `json:"version,omitempty"`
}

// FormForAdd contains details about the form that you want to add.
type FormForAdd struct {
	// (Required) The ID of the form.
	FormID string `json:"formId,omitempty"`
}

// FormGroup result from getting a form group.
type FormGroup struct {
	// The ID of the form group.
	//
	// Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
	//
	FormGroupID string `json:"formGroupId,omitempty"`
	// A list of forms.
	Forms []GroupForm `json:"forms,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
	// An array of office IDs.
	OfficeIds []int `json:"officeIds,omitempty"`
}

// FormGroupForCreate request object for FormGroup: CreateFormGroup.
type FormGroupForCreate struct {
	// The name of the group.
	Name string `json:"name,omitempty"`
}

// FormGroupForUpdate not described in definition file
type FormGroupForUpdate struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
}

// FormGroupForm not described in definition file
type FormGroupForm struct {
	// The ID of the form.
	//
	// Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
	//
	FormID string `json:"formId,omitempty"`
	// **True** if the form is required.
	IsRequired bool `json:"isRequired,omitempty"`
	// The UTC date and time when the item was last updated. This is a read-only value that the service assigns.
	//
	// Example: 2019-07-17T17:45:42.783Z
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
}

// FormGroupFormList not described in definition file
type FormGroupFormList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// A list of forms.
	Forms []FormGroupForm `json:"forms,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// FormGroupFormToAssign not described in definition file
type FormGroupFormToAssign struct {
	// The ID of the form.
	//
	// Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
	//
	FormID string `json:"formId,omitempty"`
	// **True** if the form is required.
	IsRequired bool `json:"isRequired,omitempty"`
}

// FormGroupSummary contains details about a form group.
type FormGroupSummary struct {
	// The number of forms in the form group.
	//
	// Example: `10`
	FormCount int32 `json:"formCount,omitempty"`
	// The ID of the form group.
	//
	// Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
	//
	FormGroupID string `json:"formGroupId,omitempty"`
	// The name of the form group.
	//
	// Example: `Apartment Rental`
	Name string `json:"name,omitempty"`
}

// FormGroupSummaryList contains a list of form groups.
type FormGroupSummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// A list of form groups.
	FormGroups []FormGroupSummary `json:"formGroups,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// FormLibrarySummary contains details about a specific form library.
type FormLibrarySummary struct {
	// The number of forms in the form library.
	//
	// Example: `50`
	FormCount int32 `json:"formCount,omitempty"`
	// The ID of the form library.
	//
	// Example: `402c6e2f-xxxx-xxxx-xxxx-ff3f249f6da9`
	//
	FormsLibraryID string `json:"formsLibraryId,omitempty"`
	// The name of the form library.
	//
	// Example: `MOR - Mainstreet Organization of Realtors`
	Name string `json:"name,omitempty"`
}

// FormLibrarySummaryList contains a list of forms libraries.
type FormLibrarySummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// A list of form libraries.
	FormsLibrarySummaries []FormLibrarySummary `json:"formsLibrarySummaries,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// FormProviderAssociationSummary not described in definition file
type FormProviderAssociationSummary struct {
	//
	AssociationID string `json:"associationId,omitempty"`
	//
	FormProviderAssociationGUID string `json:"formProviderAssociationGuid,omitempty"`
	//
	FormProviderAssociationName string `json:"formProviderAssociationName,omitempty"`
	//
	LastUpdateDate string `json:"lastUpdateDate,omitempty"`
	// The provider ID.
	// <!-- like nar, nwmls etc.. -->
	//
	ProviderID string `json:"providerId,omitempty"`
}

// FormProviderAssociationsSummaryList not described in definition file
type FormProviderAssociationsSummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	//
	FormProviderAssociations []FormProviderAssociationSummary `json:"formProviderAssociations,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// FormSummary contains details about a form in a form library.
type FormSummary struct {
	// The date and time when the form was last updated.
	//
	// Example: `2017-08-11T19:58:36.18`
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`
	// The ID of the form.
	//
	// Example: `301f560d-xxxx-xxxx-xxxx-063a47cc12c2`
	//
	LibraryFormID string `json:"libraryFormId,omitempty"`
	// The name of the form.
	//
	// Example: `Short Sale Supplement to Marketing Agreement`
	Name string `json:"name,omitempty"`
	//
	ViewingUserHasAccess bool `json:"viewingUserHasAccess,omitempty"`
}

// FormSummaryList contains a list of forms in a form library.
type FormSummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// A list of forms.
	Forms []FormSummary `json:"forms,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// GlobalActivityTypes contains a list of activity types.
type GlobalActivityTypes struct {
	// A list of activity types.
	ActivityTypes []ActivityType `json:"activityTypes,omitempty"`
}

// GlobalClosingStatuses contains a list of valid closing statuses, or reasons for closing a room.
type GlobalClosingStatuses struct {
	// A list of closing statuses (reasons for closing a room).
	ClosingStatuses []ClosingStatus `json:"closingStatuses,omitempty"`
}

// GlobalContactSides contains a list of contact sides.
type GlobalContactSides struct {
	// A list of contact sides.
	ContactSides []ContactSide `json:"contactSides,omitempty"`
}

// GlobalCountries contains a list of supported countries.
type GlobalCountries struct {
	// An array of country objects.
	Countries []Country `json:"countries,omitempty"`
}

// GlobalCurrencies contains a list of supported currencies.
type GlobalCurrencies struct {
	// A list of currency objects.
	Currencies []Currency `json:"currencies,omitempty"`
}

// GlobalFinancingTypes contains a list of financing types.
type GlobalFinancingTypes struct {
	// A list of financing types.
	FinancingTypes []FinancingType `json:"financingTypes,omitempty"`
}

// GlobalOriginsOfLeads contains a list of origins of leads.
type GlobalOriginsOfLeads struct {
	// A list of origins of leads.
	OriginsOfLeads []OriginOfLead `json:"originsOfLeads,omitempty"`
}

// GlobalPropertyTypes contains a list of property types.
type GlobalPropertyTypes struct {
	// A list of property types.
	PropertyTypes []PropertyType `json:"propertyTypes,omitempty"`
}

// GlobalRoomContactTypes contains a list of room contact types.
type GlobalRoomContactTypes struct {
	// A list of room contact types.
	RoomContactTypes []RoomContactType `json:"roomContactTypes,omitempty"`
}

// GlobalSellerDecisionTypes contains a list of seller decision types.
type GlobalSellerDecisionTypes struct {
	// A list of seller decision types.
	SellerDecisionTypes []SellerDecisionType `json:"sellerDecisionTypes,omitempty"`
}

// GlobalSpecialCircumstanceTypes contains a list of special circumstance types.
type GlobalSpecialCircumstanceTypes struct {
	// A list of special circumstance types.
	SpecialCircumstanceTypes []SpecialCircumstanceType `json:"specialCircumstanceTypes,omitempty"`
}

// GlobalStates contains a list of supported states.
type GlobalStates struct {
	// A list of states.
	States []State `json:"states,omitempty"`
}

// GlobalTaskDateTypes contains a list of task date types.
type GlobalTaskDateTypes struct {
	// A list of task date types.
	TaskDateTypes []TaskDateType `json:"taskDateTypes,omitempty"`
}

// GlobalTaskResponsibilityTypes contains a list of task responsibility types.
type GlobalTaskResponsibilityTypes struct {
	// A list of task responsibility types.
	TaskResponsibilityTypes []TaskResponsibilityType `json:"taskResponsibilityTypes,omitempty"`
}

// GlobalTaskStatuses not described in definition file
type GlobalTaskStatuses struct {
	//
	TaskStatuses []TaskStatus `json:"taskStatuses,omitempty"`
}

// GlobalTimeZones contains a list of time zones.
type GlobalTimeZones struct {
	// A list of time zones.
	TimeZones []TimeZone `json:"timeZones,omitempty"`
}

// GlobalTransactionSides contains a list of transaction sides.
type GlobalTransactionSides struct {
	// A list of transaction sides.
	TransactionSides []TransactionSide `json:"transactionSides,omitempty"`
}

// GroupForm description of a single form in a group.
type GroupForm struct {
	// The ID of the form.
	//
	// Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
	//
	FormID string `json:"formId,omitempty"`
	// **True** if the form is required.
	IsRequired bool `json:"isRequired,omitempty"`
	// The UTC date and time when the item was last updated. This is a read-only value that the service assigns.
	//
	// Example: 2019-07-17T17:45:42.783Z
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
	//
	ViewingUserHasAccess bool `json:"viewingUserHasAccess,omitempty"`
}

// ListingType not described in definition file
type ListingType struct {
}

// LockedOutDetails details about a locked account.
type LockedOutDetails struct {
	// The reason the account was locked.
	Reason string `json:"reason,omitempty"`
}

// MemberSortingOption not described in definition file
type MemberSortingOption struct {
}

// Office contains information about an office.
type Office struct {
	// First line of the office street address.
	Address1 string `json:"address1,omitempty"`
	// Second line of the office street address.
	Address2 string `json:"address2,omitempty"`
	// City name or metropolitan area of the office address.
	City string `json:"city,omitempty"`
	// The two-letter country code of the office address (for example, "UK" for United Kingdom).
	CountryID string `json:"countryId,omitempty"`
	// The UTC date and time when the item was created. This is a read-only value that the service assigns.
	//
	// Example: `2019-07-17T17:45:42.783Z`
	//
	//
	CreatedDate string `json:"createdDate,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The ID of the office. This is the ID that the system generated when you created the office.
	OfficeID int32 `json:"officeId,omitempty"`
	// Phone number of the office.
	Phone string `json:"phone,omitempty"`
	// Postal code or ZIP code of the office address.
	PostalCode string `json:"postalCode,omitempty"`
	// The ID of the region. This is the ID that the system generated when you created the region.
	RegionID int32 `json:"regionId,omitempty"`
	// A concatenation of the two-letter country code with the state/province/region of the office address.
	//
	// Example: `US-OH` (for Ohio)
	StateID string `json:"stateId,omitempty"`
	// The ID of the time zone for the office address.
	//
	// Example: `eastern` (for the Eastern US Time Zone)
	TimeZoneID string `json:"timeZoneId,omitempty"`
}

// OfficeForCreate contains details about the office that you want to create.
type OfficeForCreate struct {
	// First line of the office street address.
	Address1 string `json:"address1,omitempty"`
	// Second line of the office street address.
	Address2 string `json:"address2,omitempty"`
	// City name or metropolitan area of the office address.
	City string `json:"city,omitempty"`
	// The two-letter country code of the office address (for example, "UK" for United Kingdom).
	CountryID string `json:"countryId,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
	// Phone number of the office.
	Phone string `json:"phone,omitempty"`
	// Postal code or ZIP code of the office address.
	PostalCode string `json:"postalCode,omitempty"`
	// The ID of the region. This is the ID that the system generated when you created the region.
	RegionID int32 `json:"regionId,omitempty"`
	// A concatenation of the two-letter country code with the state/province/region of the office address.
	//
	// Example: `US-OH` (for Ohio)
	StateID string `json:"stateId,omitempty"`
	// The ID of the time zone for the office address.
	//
	// Example: `eastern` (for the Eastern US Time Zone)
	TimeZoneID string `json:"timeZoneId,omitempty"`
}

// OfficeReferenceCount is a complex element containing the number and type of each object referencing the office.
type OfficeReferenceCount struct {
	// The type of object referencing the office.
	ReferenceType string `json:"referenceType,omitempty"`
	// The number of objects of this type referencing the office.
	ReferencedCount int32 `json:"referencedCount,omitempty"`
}

// OfficeReferenceCountList contains a list of each type of object and the number of objects of that type referencing the office.
type OfficeReferenceCountList struct {
	// A list of each type of object and the number of objects of that type referencing the office.
	ReferencesCounts []OfficeReferenceCount `json:"referencesCounts,omitempty"`
}

// OfficeSummary is a complex element containing summary information on an office; the elements of this object are identical to those of the `Offices` object.
type OfficeSummary struct {
	// First line of the office street address.
	Address1 string `json:"address1,omitempty"`
	// Second line of the office street address.
	Address2 string `json:"address2,omitempty"`
	// City name or metropolitan area of the office address.
	City string `json:"city,omitempty"`
	// The two-letter country code of the office address (for example, "UK" for United Kingdom).
	CountryID string `json:"countryId,omitempty"`
	// UTC datetime that the office was created (for example, "2019-07-17T17:45:42.783"). Note that the service assigns this value, so it is read-only.
	CreatedDate string `json:"createdDate,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The ID of the office. This is the ID that the system generated when you created the office.
	OfficeID int32 `json:"officeId,omitempty"`
	// Phone number of the office.
	Phone string `json:"phone,omitempty"`
	// Postal code or ZIP code of the office address.
	PostalCode string `json:"postalCode,omitempty"`
	// The ID of the region. This is the ID that the system generated when you created the region.
	RegionID int32 `json:"regionId,omitempty"`
	// A concatenation of the two-letter country code with the state/province/region of the office address.
	//
	// Example: `US-OH` (for Ohio)
	StateID string `json:"stateId,omitempty"`
	// The ID of the time zone for the office address.
	//
	// Example: `eastern` (for the Eastern US Time Zone)
	TimeZoneID string `json:"timeZoneId,omitempty"`
}

// OfficeSummaryList object that contains a summary of information about a requested group of offices in the Rooms account.
type OfficeSummaryList struct {
	// The index position within the total result set at which returned values end.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// A list of `OfficeSummary` objects containing summary information about an office.
	OfficeSummaries []OfficeSummary `json:"officeSummaries,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The index position within the total result set from which returned values start.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// OriginOfLead is the `OriginsOfLeads` resource enables you to get a list of origins of leads (such as Trulia or Zillow) that you can specify for rooms.
type OriginOfLead struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The ID of the origin of lead.
	//
	// Example: `tru` (for `Trulia`)
	OriginOfLeadID string `json:"originOfLeadId,omitempty"`
}

// Permissions contains details about permissions.
type Permissions struct {
	// When **true,** users are automatically added to new rooms when someone with an internal role in their office or region creates or is invited to a room.
	AutoAccessToRooms bool `json:"autoAccessToRooms,omitempty"`
	//
	AutoAccessToRoomsInOfficeOnly bool `json:"autoAccessToRoomsInOfficeOnly,omitempty"`
	// When **true,** users can add documents to rooms and share the documents that they own with other people in the room.
	CanAddDocuments bool `json:"canAddDocuments,omitempty"`
	// When **true,** users can add documents from form groups to rooms.
	CanAddDocumentsFromFormGroups bool `json:"canAddDocumentsFromFormGroups,omitempty"`
	// When **true,** users can add documents from form libraries to rooms.
	CanAddDocumentsFromFormLibraries bool `json:"canAddDocumentsFromFormLibraries,omitempty"`
	// When **true,** users can add other users with a lower access level than their own to offices or regions that they oversee and set those users' roles.
	CanAddMemberAndSetRoleLowerAccessLevel bool `json:"canAddMemberAndSetRoleLowerAccessLevel,omitempty"`
	// When **true,** users can add other users with the same access level as their own to offices or regions that they oversee and set those users' roles.
	CanAddMemberAndSetRoleSameAccessLevel bool `json:"canAddMemberAndSetRoleSameAccessLevel,omitempty"`
	// When **true,** users can add tasks to any task list, including lists that they do not own.
	CanAddTasksToAnyTaskLists bool `json:"canAddTasksToAnyTaskLists,omitempty"`
	// When **true,** users can add tasks to rooms.
	CanAddTasksToRooms bool `json:"canAddTasksToRooms,omitempty"`
	// When **true,** users can see the **Invite** button on the room's **People** tab and can invite people into a room.
	CanAddUsersToRooms bool `json:"canAddUsersToRooms,omitempty"`
	// When **true,** users can apply a room template when they create a room.
	CanApplyRoomTemplates bool `json:"canApplyRoomTemplates,omitempty"`
	// When **true,** users see the **Attach Task List** option in the room's **Actions** menu and can apply task lists to rooms.
	CanApplyTaskList bool `json:"canApplyTaskList,omitempty"`
	// When **true** and a room is approved, the task lists associated with the room auto-approve if all of the tasks are approved.
	CanAutoApproveTaskList bool `json:"canAutoApproveTaskList,omitempty"`
	// When **true,** users can use the **Submit Task List** option in the room's **Actions** menu to submit task lists for review.
	CanAutoSubmitTaskList bool `json:"canAutoSubmitTaskList,omitempty"`
	// When **true,** users can edit the roles of other users who have a lower access level than their own and that belong to offices or regions that they oversee.
	CanChangeMemberRoleLowerAccessLevel bool `json:"canChangeMemberRoleLowerAccessLevel,omitempty"`
	// When **true,** users can edit the roles of other users who have the same access level as their own and that belong to offices or regions that they oversee.
	CanChangeMemberRoleSameAccessLevel bool `json:"canChangeMemberRoleSameAccessLevel,omitempty"`
	// When **true,** users can review and close rooms that are owned by them or someone they manage.
	CanCloseRooms bool `json:"canCloseRooms,omitempty"`
	//
	CanConnectToMortgageCadence bool `json:"canConnectToMortgageCadence,omitempty"`
	// When **true,** users see a **Copy** room option in the room **Actions** menu, which copies the room's detail information to populate a new room.
	CanCopyRoomDetails bool `json:"canCopyRoomDetails,omitempty"`
	//
	CanCreateFormTemplates bool `json:"canCreateFormTemplates,omitempty"`
	// When **true,** users can see the **New** button on the **Rooms** tab and can create a room.
	CanCreateRooms bool `json:"canCreateRooms,omitempty"`
	// When **true,** users can delete tasks, even if the task owner has not marked the task as deletable.
	CanDeleteAnyTasks bool `json:"canDeleteAnyTasks,omitempty"`
	// When **true,** users can delete deletable tasks.
	CanDeleteDeletableTasks bool `json:"canDeleteDeletableTasks,omitempty"`
	// When **true,** users can delete documents that they own from rooms.
	CanDeleteOwnedDocuments bool `json:"canDeleteOwnedDocuments,omitempty"`
	// When **true,** the user can delete rooms that are owned by them or someone they manage.
	CanDeleteOwnedRooms bool `json:"canDeleteOwnedRooms,omitempty"`
	//
	CanDeleteRooms bool `json:"canDeleteRooms,omitempty"`
	//
	CanDeleteSignedDocuments bool `json:"canDeleteSignedDocuments,omitempty"`
	//
	CanDeleteUnsignedDocuments bool `json:"canDeleteUnsignedDocuments,omitempty"`
	//
	CanEditAnyRoomRole bool `json:"canEditAnyRoomRole,omitempty"`
	// When **true,** users can edit tasks in rooms, even if the task owner has not marked the task as editable.
	CanEditAnyTasks bool `json:"canEditAnyTasks,omitempty"`
	// When **true,** users can edit editable tasks.
	CanEditEditableTasks bool `json:"canEditEditableTasks,omitempty"`
	//
	CanEditInvitedRoomRole bool `json:"canEditInvitedRoomRole,omitempty"`
	//
	CanEditRoomSide bool `json:"canEditRoomSide,omitempty"`
	//
	CanExportCompanyUsageReport bool `json:"canExportCompanyUsageReport,omitempty"`
	// When **true,** users can export the details, people, and history of a room to a PDF or CSV file.
	CanExportRoomActivityDetailsPeople bool `json:"canExportRoomActivityDetailsPeople,omitempty"`
	// When **true,** users can access the **Company Settings** tab under **Rooms > Admin > Company** to manage company account settings and change the company name, contact information, currency, offices, and regions.
	CanManageAccount bool `json:"canManageAccount,omitempty"`
	//
	CanManageAnyUserRoomAccess bool `json:"canManageAnyUserRoomAccess,omitempty"`
	//
	CanManageDocsOnAnyTask bool `json:"canManageDocsOnAnyTask,omitempty"`
	// When **true,** users have access to **Admin > Forms** and can manage form groups and form libraries for the company.
	CanManageFormGroups bool `json:"canManageFormGroups,omitempty"`
	//
	CanManageFormPackets bool `json:"canManageFormPackets,omitempty"`
	//
	CanManageIntegrationSettings bool `json:"canManageIntegrationSettings,omitempty"`
	//
	CanManageInvitedUserRoomAccess bool `json:"canManageInvitedUserRoomAccess,omitempty"`
	// When **true,** users can access the **Company Logo** section in **Company Settings** to add or change the company logo.
	CanManageLogo bool `json:"canManageLogo,omitempty"`
	// When **true,** users can change the access level, office, region, and eSignature permission set of other users who have a lower access level than their own.
	CanManageMemberLowerAccessLevel bool `json:"canManageMemberLowerAccessLevel,omitempty"`
	// When **true,** users can change the access level, office, region, and eSignature permission set of other users who have the same access level as their own.
	CanManageMemberSameAccessLevel bool `json:"canManageMemberSameAccessLevel,omitempty"`
	//
	CanManageRolesAndPermissions bool `json:"canManageRolesAndPermissions,omitempty"`
	// When **true,** users see the **Room Details** tab under **Rooms > Admin > Company** and can use it to configure room details. They can also add additional contact fields.
	CanManageRoomDetails bool `json:"canManageRoomDetails,omitempty"`
	//
	CanManageRoomOwners bool `json:"canManageRoomOwners,omitempty"`
	// When **true,** users see the **Room Templates** option in the **Rooms > Admin** menu, which enables them to add, edit, and delete room templates.
	CanManageRoomTemplates bool `json:"canManageRoomTemplates,omitempty"`
	// When **true,** users can manage all documents, including ones that another user has shared with them.
	CanManageSharedDocs bool `json:"canManageSharedDocs,omitempty"`
	// When **true,** users have access to the **Admin > Company > Task List Templates** menu so that they can create, edit, and delete task list templates for all regions and offices.
	CanManageTaskTemplatesForAllRegionsAllOffices bool `json:"canManageTaskTemplatesForAllRegionsAllOffices,omitempty"`
	// When **true,** users can use the **Remove Task List** option in the room's **Actions** menu to remove task lists owned by others.
	//
	// **Note:** Users can already remove task lists that they own.
	CanRemoveAnyTaskList bool `json:"canRemoveAnyTaskList,omitempty"`
	// When **true,** users can remove other users who have a lower access level than their own and that belong to offices or regions that they oversee from the company account.
	CanRemoveCompanyMemberLowerAccessLevel bool `json:"canRemoveCompanyMemberLowerAccessLevel,omitempty"`
	// When **true,** users can remove other users who have the same access level as their own and that belong to offices or regions that they oversee from the company account.
	CanRemoveCompanyMemberSameAccessLevel bool `json:"canRemoveCompanyMemberSameAccessLevel,omitempty"`
	// When **true,** users can reopen rooms that are owned by them or someone they manage.
	CanReopenRooms bool `json:"canReopenRooms,omitempty"`
	//
	CanReviewAnyTask bool `json:"canReviewAnyTask,omitempty"`
	// When **true,** users can approve or decline a task list. Declining a task list sends it back to open status for the assignee to complete. The assignee also receives a notification.
	CanReviewTaskList bool `json:"canReviewTaskList,omitempty"`
	//
	CanSendRoomDetailsToLoneWolf bool `json:"canSendRoomDetailsToLoneWolf,omitempty"`
	// When **true,** users can share documents that they do not own (documents that another user has shared with them).
	CanShareDocsNotOwned bool `json:"canShareDocsNotOwned,omitempty"`
	// When **true,** users can submit rooms for review that are owned by them or someone they manage.
	CanSubmitRoomsForReview bool `json:"canSubmitRoomsForReview,omitempty"`
	// When **true,** users can use the **Submit Task List** option in the room's **Actions** menu to submit task lists for review.
	CanSubmitTaskList bool `json:"canSubmitTaskList,omitempty"`
	// When **true,** users can view and make edits to any room detail fields.
	CanViewAndEditRoomDetails bool `json:"canViewAndEditRoomDetails,omitempty"`
	// When **true,** users can view all room detail fields that the company Admin has set to **Use.**
	CanViewRoomDetails bool `json:"canViewRoomDetails,omitempty"`
	// When a user for whom this permission is set to **true** adds a document, the document is automatically seen and owned by those users' peers. Peers are others in the same office or region who have the same access level as the user.
	DocumentsAutoOwnedByPeers bool `json:"documentsAutoOwnedByPeers,omitempty"`
	// When a user for whom this permission is set to **true** adds a document, the document is automatically shared with other room users that are in the user's office.
	DocumentsViewableByOthersInRoomFromOffice bool `json:"documentsViewableByOthersInRoomFromOffice,omitempty"`
	//
	IsHiddenInRoom bool `json:"isHiddenInRoom,omitempty"`
}

// ProductVersion not described in definition file
type ProductVersion struct {
}

// PropertyType contains information about a property type.
type PropertyType struct {
	// The name of the property type. Possible values are:
	//
	// - `Residential Detached`
	// - `Residential Attached`
	// - `New Construction`
	// - `Residential Developed Lots`
	// - `Land/Farm`
	// - `Rental`
	// - `Commercial`
	// - `Condominium`
	// - `Mobile Home`
	//
	Name string `json:"name,omitempty"`
	// The ID of the property type.
	//
	// Example: `resd` (for `Residential Detached`)
	PropertyTypeID string `json:"propertyTypeId,omitempty"`
}

// Region not described in definition file
type Region struct {
	// UTC datetime that the region was created (for example "2019-06-27T19:32:46.943"). Note that the service assigns this value, so it is read-only.
	CreatedDate string `json:"createdDate,omitempty"`
	// String that specifies the region name.
	Name string `json:"name,omitempty"`
	// The ID of the region. This is the ID that the system generated when you created the region.
	RegionID int32 `json:"regionId,omitempty"`
}

// RegionReferenceCount is a complex element containing the number and type of each object referencing the region.
type RegionReferenceCount struct {
	// The number of objects of this type referencing the region.
	ReferenceCount int32 `json:"referenceCount,omitempty"`
	// The type of object referencing the region.
	ReferenceType string `json:"referenceType,omitempty"`
}

// RegionReferenceCountList contains a list of each type of object and the number of objects of that type referencing the region.
type RegionReferenceCountList struct {
	// A list of each type of object and the number of objects of that type referencing the region.
	ReferenceCounts []RegionReferenceCount `json:"referenceCounts,omitempty"`
}

// RegionSummary is a complex element containing summary information on a region; the elements of this object are identical to those of the `Regions` object.
type RegionSummary struct {
	// UTC datetime that the region was created (for example "2019-06-27T19:32:46.943"). Note that the service assigns this value, so it is read-only.
	CreatedDate string `json:"createdDate,omitempty"`
	// String that specifies the region name.
	Name string `json:"name,omitempty"`
	// The ID of the region. This is the ID that the system generated when you created the region.
	RegionID int32 `json:"regionId,omitempty"`
}

// RegionSummaryList object that contains a summary of information about a requested group of regions in the Rooms account.
type RegionSummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// A list of `RegionSummary` objects containing summary information on a region; the elements of this object are identical to those of the `Regions` object.
	RegionSummaries []RegionSummary `json:"regionSummaries,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// Role this object contains information about a role.
type Role struct {
	// The UTC DateTime when the role was created.
	CreatedDate string `json:"createdDate,omitempty"`
	// When **true,** indicates that this role is currently assigned to a user.
	IsAssigned bool `json:"isAssigned,omitempty"`
	// When **true,** the role is the default for account administrators.
	IsDefaultForAdmin bool `json:"isDefaultForAdmin,omitempty"`
	// When **true,** the role is an external role. You assign external roles to people from outside your company when you invite them into a room.
	IsExternal bool `json:"isExternal,omitempty"`
	// This field is deprecated in Rooms Version 6.
	LegacyRoleID string `json:"legacyRoleId,omitempty"`
	// The name of the role.
	//
	// Examples:
	//
	// - `Agent`
	// - `Default Admin`
	Name string `json:"name,omitempty"`
	// This object is deprecated in Rooms Version 6.
	Permissions *Permissions `json:"permissions,omitempty"`
	// In Rooms v6, this is the ID of the company role assigned to the user.
	//
	// You can assign external roles to users who aren't a part of your organization.
	//
	// **Note:** If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
	RoleID int32 `json:"roleId,omitempty"`
}

// RoleForCreate contains details about the role that you want to create.
type RoleForCreate struct {
	// When **true,** the role is an external role. You assign external roles to people from outside your company when you invite them into a room.
	IsExternal bool `json:"isExternal,omitempty"`
	// The name of the role.
	Name string `json:"name,omitempty"`
	// An object that contains details about the permissions associated with the role.
	Permissions *Permissions `json:"permissions,omitempty"`
}

// RoleForUpdate this request object contains the details to use for the update.
type RoleForUpdate struct {
	// When **true,** the role is an external role. You assign external roles to people from outside your company when you invite them into a room.
	IsExternal bool `json:"isExternal,omitempty"`
	// The name of the role.
	Name string `json:"name,omitempty"`
	// An object that contains details about the permissions associated with the role.
	Permissions *Permissions `json:"permissions,omitempty"`
}

// RoleSummary contains details about a role.
type RoleSummary struct {
	// The UTC date and time when the item was created. This is a read-only value that the service assigns.
	//
	// Example: `2019-07-17T17:45:42.783Z`
	//
	//
	CreatedDate string `json:"createdDate,omitempty"`
	// When **true,** the role is the default for account administrators.
	IsDefaultForAdmin bool `json:"isDefaultForAdmin,omitempty"`
	// When **true,** the role is an external role. You assign external roles to people from outside your company when you invite them into a room.
	IsExternal bool `json:"isExternal,omitempty"`
	// This field is deprecated in Rooms Version 6.
	LegacyRoleID string `json:"legacyRoleId,omitempty"`
	// The name of the role.
	Name string `json:"name,omitempty"`
	// The ID of the company role assigned to the user.
	RoleID int32 `json:"roleId,omitempty"`
}

// RoleSummaryList this complex type contains details about the roles that are associated with an account.
type RoleSummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// An array of `role` objects.
	Roles []RoleSummary `json:"roles,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// RolesFilterContextTypes not described in definition file
type RolesFilterContextTypes struct {
}

// Room is the Rooms resource provides methods that enable you to create and manage rooms. In Rooms for Real Estate, a room is a collaborative digital space corresponding to a specific property. In Rooms for Mortgages, a room corresponds to a specific loan.
type Room struct {
	// The UTC date and time when the room was closed.
	ClosedDate string `json:"closedDate,omitempty"`
	// The reason why a room was closed. Possible values are:
	//
	// - `sold`: Property sold.
	// - `dup`: Duplicate room.
	// - `escrcncl`: Escrow canceled.
	// - `inspctn`: Inspection issues.
	// - `exp`: Listing expired.
	// - `lostbuy`: Buyer withdrew.
	// - `list`: Listing withdrawn.
	// - `newlist`: New listing.
	// - `offrrjct`: Offer not accepted.
	// - `pend`: Pending. An agent might use this status to temporarily hide a room from their Active rooms view if they are blocked on a task. When they are ready to reopen the room, they can quickly find it by filtering for rooms in `pending` status.
	// - `lstcanc`: Listing canceled.
	// - `lstleave`: Listing released.
	// - `sellwtdw`: Seller withdrew.
	// - `nofin`: Buyer unable to finance.
	// - `disciss`: Property disclosure issue.
	// - `appiss`: Appraisal issues.
	// - `mtgiss`: Mortgage issues. Use when details about why the buyer wasn't able to obtain financing are unknown.
	// - `zoniss`: Zoning issues.
	// - `attiss`: Attorney review issues.
	// - `proplsd`: Property leased. Use for the list side of the transaction.
	// - `tenlease`: Tenant signed lease. Use when an agent helps renters find a to lease.
	ClosedStatusID string `json:"closedStatusId,omitempty"`
	// The ID of the company.
	CompanyID int32 `json:"companyId,omitempty"`
	// The ID of the user who created the room.
	CreatedByUserID int32 `json:"createdByUserId,omitempty"`
	// The UTC date and time when the item was created. This is a read-only value that the service assigns.
	//
	// Example: `2019-07-17T17:45:42.783Z`
	//
	//
	CreatedDate string `json:"createdDate,omitempty"`
	// The field data associated with a room.
	// See [Rooms: GetRoomFieldData](/docs/rooms-api/reference/rooms/rooms/getroomfielddata/).
	FieldData *FieldData `json:"fieldData,omitempty"`
	//
	FieldDataLastUpdatedDate string `json:"fieldDataLastUpdatedDate,omitempty"`
	// The name of the room.
	//
	// Maximum Length: 100 characters.
	Name string `json:"name,omitempty"`
	// The ID of the office. This is the ID that the system generated when you created the office.
	OfficeID int32 `json:"officeId,omitempty"`
	// The ID of the user who rejected the room.
	RejectedByUserID int32 `json:"rejectedByUserId,omitempty"`
	// The date on which the reviewer rejected the room. For example, a reviewer might reject closing a room if documentation is missing or the details are inaccurate.
	RejectedDate string `json:"rejectedDate,omitempty"`
	// The ID of the room.
	RoomID int32 `json:"roomId,omitempty"`
	//
	RoomOwnerIds []int `json:"roomOwnerIds,omitempty"`
	// The UTC DateTime when the room was submitted for review. This is when a member with a role for which the **Submit rooms for review** permission is set to **true** submitted the room to a member with a role for which the **Review and close rooms** permission is set to **true.**
	SubmittedForReviewDate string `json:"submittedForReviewDate,omitempty"`
}

// RoomContactType is the `RoomContactTypes` resource provides a method that enables you to retrieve a list of room contact types, such as Buyer, Seller, and Listing Agent.
type RoomContactType struct {
	// The ID of the room contact type.
	//
	// Example: `lisagent` (for `Listing Agent`)
	ID string `json:"id,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
}

// RoomDocument is an individual document in a room.
type RoomDocument struct {
	// The UTC date and time that the document was created or uploaded.
	//
	// Example: `2019-07-25T22:18:56.95Z`
	//
	CreatedDate string `json:"createdDate,omitempty"`
	// The ID of the corresponding DocuSign form.
	DocuSignFormID string `json:"docuSignFormId,omitempty"`
	// The ID of the document.
	DocumentID int32 `json:"documentId,omitempty"`
	// The ID of the folder the document is in.
	FolderID int32 `json:"folderId,omitempty"`
	// **True** if the document is archived.
	IsArchived bool `json:"isArchived,omitempty"`
	// **True** if the document is from a dynamic content provider like [DocuSign Forms](/docs/rooms-api/rooms101/forms/).
	IsDynamic bool `json:"isDynamic,omitempty"`
	// When **true,** this property indicates that the document is signed.
	IsSigned bool `json:"isSigned,omitempty"`
	// **True** if the document is virtual.
	IsVirtual bool `json:"isVirtual,omitempty"`
	// The file name of the document.
	//
	// Example: `Short Sale Supplement to Marketing Agreement.pdf`
	Name string `json:"name,omitempty"`
	// The owner of the document.
	Owner *RoomDocumentOwner `json:"owner,omitempty"`
	// The ID of the user who owns the document.
	OwnerID int32 `json:"ownerId,omitempty"`
	// The size of the document in bytes.
	Size int64 `json:"size,omitempty"`
}

// RoomDocumentList is a list of documents in a room.
type RoomDocumentList struct {
	// An array of room documents.
	Documents []RoomDocument `json:"documents,omitempty"`
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// RoomDocumentOwner not described in definition file
type RoomDocumentOwner struct {
	// The company name.
	CompanyName string `json:"companyName,omitempty"`
	// The user's first name.
	FirstName string `json:"firstName,omitempty"`
	// The source of the user's profile picture.
	ImageSrc string `json:"imageSrc,omitempty"`
	// The user's last name.
	LastName string `json:"lastName,omitempty"`
	// The ID of the user.
	UserID int32 `json:"userId,omitempty"`
}

// RoomFolder information about a room folder.
type RoomFolder struct {
	// When **true,** this is the default folder.
	IsDefault bool `json:"isDefault,omitempty"`
	// The name of the folder.
	Name string `json:"name,omitempty"`
	// The ID of the folder.
	RoomFolderID int32 `json:"roomFolderId,omitempty"`
}

// RoomFolderList is a list of room folder results.
type RoomFolderList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// An array of room folders.
	Folders []RoomFolder `json:"folders,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// RoomForCreate this request object contains the details about the new room.
type RoomForCreate struct {
	// The details to use for the room, such as `yearBuilt` and `originalListingAmount`. This is the information that appears on a room's Details tab. Note that `address1`, `state`, `postalCode`, and `city` are required fields.
	//
	// To determine the fields for which you can provide data, use the Fields: GetFieldSet method.
	FieldData *FieldDataForCreate `json:"fieldData,omitempty"`
	//
	ListingSource string `json:"listingSource,omitempty"`
	// (Required) The name of the room.
	Name string `json:"name,omitempty"`
	// (Optional) The ID of the office associated with the room. Required when creating a room on behalf of someone else or a Manager-owned room.
	OfficeID int32 `json:"officeId,omitempty"`
	// The ID of the user who owns the room.
	OwnerID int32 `json:"ownerId,omitempty"`
	// (Required) The ID of the role that the owner has in the room.
	RoleID int32 `json:"roleId,omitempty"`
	// (Optional) The ID of the template to use to create the room.
	TemplateID int32 `json:"templateId,omitempty"`
	// The ID of the transaction side. Valid values are:
	//
	// - `buy`
	// - `sell`
	// - `listbuy`
	// - `refi`
	//
	// **Note:** This property is required for real estate companies, and otherwise ignored.
	TransactionSideID string `json:"transactionSideId,omitempty"`
}

// RoomInvite is the information to use for the invitation.
type RoomInvite struct {
	// The user's email address.
	Email string `json:"email,omitempty"`
	// The user's first name.
	FirstName string `json:"firstName,omitempty"`
	// The user's last name.
	LastName string `json:"lastName,omitempty"`
	// The ID of the company role assigned to the user.
	//
	// You can assign external roles to users who aren't a part of your organization.
	RoleID int32 `json:"roleId,omitempty"`
	// Required for a real estate company; otherwise ignored.
	TransactionSideID string `json:"transactionSideId,omitempty"`
}

// RoomInviteResponse information about the sent invitation.
type RoomInviteResponse struct {
	// The user's email address.
	Email string `json:"email,omitempty"`
	// The user's first name.
	FirstName string `json:"firstName,omitempty"`
	// The user's last name.
	LastName string `json:"lastName,omitempty"`
	// The ID of the company role assigned to the user.
	//
	// You can assign external roles to users who aren't a part of your organization.
	RoleID int32 `json:"roleId,omitempty"`
	// The ID of the room.
	RoomID int32 `json:"roomId,omitempty"`
	// The ID of the transaction side. Valid values are:
	//
	// - `buy`
	// - `sell`
	// - `listbuy`
	// - `refi`
	TransactionSideID string `json:"transactionSideId,omitempty"`
	// The ID of the user.
	UserID int32 `json:"userId,omitempty"`
}

// RoomPicture this response object contains the URL for the uploaded picture.
type RoomPicture struct {
	// The URL for the uploaded picture.
	URL string `json:"url,omitempty"`
}

// RoomStatus not described in definition file
type RoomStatus struct {
}

// RoomSummary this object contains details about a room.
type RoomSummary struct {
	// The UTC date and time when the room was closed.
	ClosedDate string `json:"closedDate,omitempty"`
	// The reason why a room was closed. Possible values are:
	//
	// - `sold`: Property sold.
	// - `dup`: Duplicate room.
	// - `escrcncl`: Escrow canceled.
	// - `inspctn`: Inspection issues.
	// - `exp`: Listing expired.
	// - `lostbuy`: Buyer withdrew.
	// - `list`: Listing withdrawn.
	// - `newlist`: New listing.
	// - `offrrjct`: Offer not accepted.
	// - `pend`: Pending. An agent might use this status to temporarily hide a room from their Active rooms view if they are blocked on a task. When they are ready to reopen the room, they can quickly find it by filtering for rooms in `pending` status.
	// - `lstcanc`: Listing canceled.
	// - `lstleave`: Listing released.
	// - `sellwtdw`: Seller withdrew.
	// - `nofin`: Buyer unable to finance.
	// - `disciss`: Property disclosure issue.
	// - `appiss`: Appraisal issues.
	// - `mtgiss`: Mortgage issues. Use when details about why the buyer wasn't able to obtain financing are unknown.
	// - `zoniss`: Zoning issues.
	// - `attiss`: Attorney review issues.
	// - `proplsd`: Property leased. Use for the list side of the transaction.
	// - `tenlease`: Tenant signed lease. Use when an agent helps renters find a to lease.
	ClosedStatusID string `json:"closedStatusId,omitempty"`
	// The ID of the user who created the room.
	CreatedByUserID int32 `json:"createdByUserId,omitempty"`
	// The UTC date and time when the item was created. This is a read-only value that the service assigns.
	//
	// Example: `2019-07-17T17:45:42.783Z`
	//
	//
	CreatedDate string `json:"createdDate,omitempty"`
	//
	FieldDataLastUpdatedDate string `json:"fieldDataLastUpdatedDate,omitempty"`
	// The name of the room.
	Name string `json:"name,omitempty"`
	// The ID of the office. This is the ID that the system generated when you created the office.
	OfficeID int32 `json:"officeId,omitempty"`
	// The ID of the user who rejected the room.
	RejectedByUserID int32 `json:"rejectedByUserId,omitempty"`
	// The date on which the reviewer rejected the room. For example, a reviewer might reject closing a room if documentation is missing or the details are inaccurate.
	RejectedDate string `json:"rejectedDate,omitempty"`
	// The ID of the room.
	RoomID int32 `json:"roomId,omitempty"`
	// The UTC DateTime when the room was submitted for review. This is when a member with a role for which the **Submit rooms for review** permission is set to **true** submitted the room to a member with a role for which the **Review and close rooms** permission is set to **true.**
	SubmittedForReviewDate string `json:"submittedForReviewDate,omitempty"`
}

// RoomSummaryList this complex type contains details about rooms.
type RoomSummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// An array of `roomSummary` objects.
	Rooms []RoomSummary `json:"rooms,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// RoomTemplate is the room template resources provides a method that enables you to retrieve the room templates associated with an account.
type RoomTemplate struct {
	// The name of the room template.
	Name string `json:"name,omitempty"`
	// The ID of the room template.
	RoomTemplateID int32 `json:"roomTemplateId,omitempty"`
	// The total number of task templates that the room template uses.
	TaskTemplateCount int32 `json:"taskTemplateCount,omitempty"`
}

// RoomTemplatesSummaryList this complex type contains information about room templates.
type RoomTemplatesSummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// An array of `roomTemplate` objects.
	RoomTemplates []RoomTemplate `json:"roomTemplates,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// RoomUser this object contains details about a specific room member.
type RoomUser struct {
	// The user's email address.
	Email string `json:"email,omitempty"`
	// The user's first name.
	FirstName string `json:"firstName,omitempty"`
	// The `userId` of the person who invited the room user to the room.
	InvitedByUserID int32 `json:"invitedByUserId,omitempty"`
	// When **true,** indicates that the user's access to the room has been revoked.
	IsRevoked bool `json:"isRevoked,omitempty"`
	// The user's last name.
	LastName string `json:"lastName,omitempty"`
	// The ID of the user's role.
	RoleID int32 `json:"roleId,omitempty"`
	// The ID of the transaction side. Valid values are:
	//
	// - `buy`
	// - `sell`
	// - `listbuy`
	// - `refi`
	TransactionSideID string `json:"transactionSideId,omitempty"`
	// The ID of the user.
	UserID int32 `json:"userId,omitempty"`
}

// RoomUserForUpdate this request object contains the information that you want to update for the room user.
type RoomUserForUpdate struct {
	// The ID of the company role assigned to the user.
	//
	// You can assign external roles to users who aren't a part of your organization.
	RoleID int32 `json:"roleId,omitempty"`
	// The ID of the transaction side. Valid values are:
	//
	// - `buy`
	// - `sell`
	// - `listbuy`
	// - `refi`
	TransactionSideID string `json:"transactionSideId,omitempty"`
}

// RoomUserRemovalDetail details for removal.
type RoomUserRemovalDetail struct {
	// The date on which the users room access should be revoked
	// in ISO 8601 fomat: `1973-12-31T07:54Z`.
	RevocationDate string `json:"revocationDate,omitempty"`
}

// RoomUserSortingOption not described in definition file
type RoomUserSortingOption struct {
}

// RoomUserSummary contains details about a room user.
type RoomUserSummary struct {
	// The company name.
	CompanyName string `json:"companyName,omitempty"`
	// The user's email address.
	Email string `json:"email,omitempty"`
	// The user's first name.
	FirstName string `json:"firstName,omitempty"`
	// The user's last name.
	LastName string `json:"lastName,omitempty"`
	// The ID of the company role assigned to the user.
	//
	// You can assign external roles to users who aren't a part of your organization.
	RoleID int32 `json:"roleId,omitempty"`
	//
	RoleName string `json:"roleName,omitempty"`
	// Deprecated in Rooms Version 6.
	TitleID int32 `json:"titleId,omitempty"`
	// The ID of the transaction side. Valid values are:
	//
	// - `buy`
	// - `sell`
	// - `listbuy`
	// - `refi`
	TransactionSideID string `json:"transactionSideId,omitempty"`
	// The ID of the user.
	UserID int32 `json:"userId,omitempty"`
}

// RoomUsersResult this complex type contains details about the users associated with a room.
type RoomUsersResult struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
	// An array of `RoomUser` objects.
	Users []RoomUserSummary `json:"users,omitempty"`
}

// SelectListFieldOption contains details about an option in a list.
type SelectListFieldOption struct {
	// The ID of the list option.
	//
	// Example: `AU`
	ID *interface{} `json:"id,omitempty"`
	// The order of the list option in the list.
	//
	// Example: `3`
	Order int32 `json:"order,omitempty"`
	// The title or name of the list option.
	//
	// Example: `Australia`
	Title string `json:"title,omitempty"`
}

// SellerDecisionType contains information about a seller decision type.
type SellerDecisionType struct {
	// The name of the seller decision type.
	Name string `json:"name,omitempty"`
	// The ID of the seller decision type.
	//
	// Example: `appr` (for `Approved`)
	SellerDecisionTypeID string `json:"sellerDecisionTypeId,omitempty"`
}

// SpecialCircumstanceType is the `SpecialCircumstanceTypes` resource provides a method that enables you to retrieve a list of special circumstance types, such as `Short Sale` and `Foreclosure`. These are the values that you can select for the **Special circumstances** field that appears on the **Room Details** page.
type SpecialCircumstanceType struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The ID of the special circumstance type.
	//
	// Example: `ss` (for `Short Sale`)
	SpecialCircumstanceTypeID string `json:"specialCircumstanceTypeId,omitempty"`
}

// State is the `States` resource provides a method that enables you to retrieve a list of states and state IDs that the Rooms API uses.
type State struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
	// A concatenation of the two-letter country code with the state/province/region of the office address.
	//
	// Example: `US-OH` (for Ohio)
	StateID string `json:"stateId,omitempty"`
}

// TaskDateType this resource provides a method that returns a list of date types that you can use with tasks, such as `Actual Close Date` and `Task Due Date`.
type TaskDateType struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The ID of the task date type.
	//
	// Example: `tdd` (for `Task Due Date`)
	TaskDateTypeID string `json:"taskDateTypeId,omitempty"`
}

// TaskList is the `TaskLists` resource helps you keep track of the documents and activities you must complete before you can close a room.
type TaskList struct {
	//
	ApprovalDate string `json:"approvalDate,omitempty"`
	//
	ApprovedByUserID int32 `json:"approvedByUserId,omitempty"`
	//
	Comment string `json:"comment,omitempty"`
	// The UTC date and time when the item was created. This is a read-only value that the service assigns.
	//
	// Example: `2019-07-17T17:45:42.783Z`
	//
	//
	CreatedDate string `json:"createdDate,omitempty"`
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The ID of the user who rejected the room.
	RejectedByUserID int32 `json:"rejectedByUserId,omitempty"`
	// The date on which the reviewer rejected the room. For example, a reviewer might reject closing a room if documentation is missing or the details are inaccurate.
	RejectedDate string `json:"rejectedDate,omitempty"`
	// The UTC DateTime when the room was submitted for review. This is when a member with a role for which the **Submit rooms for review** permission is set to **true** submitted the room to a member with a role for which the **Review and close rooms** permission is set to **true.**
	SubmittedForReviewDate string `json:"submittedForReviewDate,omitempty"`
	// The ID of the task list.
	TaskListID int32 `json:"taskListId,omitempty"`
	// The ID of the task list template.
	TaskListTemplateID int32 `json:"taskListTemplateId,omitempty"`
	// A list of tasks in the task list.
	Tasks []TaskSummary `json:"tasks,omitempty"`
}

// TaskListForCreate contains information about the task list template to use to create the new task list.
type TaskListForCreate struct {
	// (Required) The ID of the task list template.
	TaskListTemplateID int32 `json:"taskListTemplateId,omitempty"`
}

// TaskListSummary contains information about a task list.
type TaskListSummary struct {
	// The UTC DateTime when the task list was approved.
	ApprovalDate string `json:"approvalDate,omitempty"`
	// The ID of the user who approved the task list.
	ApprovedByUserID int32 `json:"approvedByUserId,omitempty"`
	// Contains a user comment about the task list.
	Comment string `json:"comment,omitempty"`
	// The UTC date and time when the task list was created. This is a read-only value that the service assigns.
	//
	// Example: 2019-07-17T17:45:42.783Z
	CreatedDate string `json:"createdDate,omitempty"`
	// The name of the task list.
	Name string `json:"name,omitempty"`
	// The ID of the user who rejected the task list.
	RejectedByUserID int32 `json:"rejectedByUserId,omitempty"`
	// The date on which the reviewer rejected the task list.
	RejectedDate string `json:"rejectedDate,omitempty"`
	// The UTC DateTime when the task list was submitted for review.
	SubmittedForReviewDate string `json:"submittedForReviewDate,omitempty"`
	// The ID of the task list.
	TaskListID int32 `json:"taskListId,omitempty"`
	// The ID of the task list template.
	TaskListTemplateID int32 `json:"taskListTemplateId,omitempty"`
}

// TaskListSummaryList contains a list of task list summaries.
type TaskListSummaryList struct {
	// A list of task list summaries.
	TaskListSummaries []TaskListSummary `json:"taskListSummaries,omitempty"`
}

// TaskListTemplate is a task list template is a custom task list that can be added to rooms.
type TaskListTemplate struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The total number of tasks in the task list template.
	TaskCount int32 `json:"taskCount,omitempty"`
	// The ID of the task list template.
	TaskListTemplateID int32 `json:"taskListTemplateId,omitempty"`
	// The number of tasks in the task list template that have documents associated with them.
	TasksWithDocumentsCount int32 `json:"tasksWithDocumentsCount,omitempty"`
}

// TaskListTemplateList contains a list of task list templates.
type TaskListTemplateList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	// A list of task list templates.
	TaskListTemplates []TaskListTemplate `json:"taskListTemplates,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
}

// TaskResponsibilityType contains information about a task responsibility type.
type TaskResponsibilityType struct {
	// The name of the task responsibility type. Valid values:
	//
	// - `Assignee`
	// - `Watcher`
	// - `Reviewer`
	Name string `json:"name,omitempty"`
	// The ID of the task responsibility type.
	TaskResponsibilityTypeID string `json:"taskResponsibilityTypeId,omitempty"`
}

// TaskStatus not described in definition file
type TaskStatus struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
	//
	TaskStatusID string `json:"taskStatusId,omitempty"`
}

// TaskSummary contains information about a task list.
type TaskSummary struct {
	// The UTC DateTime when the task was approved.
	//
	// Example: 2019-07-17T17:45:42.783Z
	ApprovalDate string `json:"approvalDate,omitempty"`
	// The UTC DateTime when the task was completed.
	//
	// Example: 2019-07-17T17:45:42.783Z
	CompletionDate string `json:"completionDate,omitempty"`
	//
	// The UTC date and time when the task was created. This is a read-only value that the service assigns.
	//
	// Example: 2019-07-17T17:45:42.783Z
	CreatedDate string `json:"createdDate,omitempty"`
	// The number of days before or after the due date (specified by the `dueDateTypeId`) within which the task must be completed. A negative number indicates that the task must be completed within a certain number of days before the due date. A positive number indicates that the task must be completed within a certain number of days after the due date.
	DueDateOffset int32 `json:"dueDateOffset,omitempty"`
	// The ID of the due date type (such as Actual Close Date or Contract Date).
	DueDateTypeID string `json:"dueDateTypeId,omitempty"`
	// A specific calendar due date for the task.
	//
	// In the API, this value is a UTC DateTime that does not actually include a time.
	//
	// Example: 2019-07-17T00:00:00.000Z
	FixedDueDate string `json:"fixedDueDate,omitempty"`
	// When **true,** the task is associated with a document.
	IsDocumentTask bool `json:"isDocumentTask,omitempty"`
	// The name of the task list.
	Name string `json:"name,omitempty"`
	// The ID of the user who owns the task.
	OwnerUserID int32 `json:"ownerUserId,omitempty"`
	// The date on which the reviewer rejected the task.
	RejectedDate string `json:"rejectedDate,omitempty"`
	// When **true,** the task must be completed and reviewed before it can be closed.
	RequiresApproval bool `json:"requiresApproval,omitempty"`
	// When **true,** the task is optional. If the task is completed (if a document is added or the task is marked complete), it must be reviewed before it can be closed.
	RequiresReview bool `json:"requiresReview,omitempty"`
	// The ID of the task list.
	TaskID int32 `json:"taskId,omitempty"`
}

// TimeZone is the `TimeZones` resource enables you to list the time zones that you can assign to an office.
type TimeZone struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The ID of the time zone for the office address.
	//
	// Example: `eastern` (for the Eastern US Time Zone)
	TimeZoneID string `json:"timeZoneId,omitempty"`
}

// TransactionSide is the `TransactionSides` resource provides a method that enables you to list possible real estate transaction sides.
type TransactionSide struct {
	// The name of the office.
	Name string `json:"name,omitempty"`
	// The ID of the transaction side. Valid values are:
	//
	// - `buy`
	// - `sell`
	// - `listbuy`
	// - `refi`
	TransactionSideID string `json:"transactionSideId,omitempty"`
}

// User contains details about a user.
type User struct {
	// The user's level of access to the account. This property determines what the user can see in the system.
	//
	// In contrast, a user's permissions determine the actions that they can take in a room. For example, a user who has `accessLevel` set to `Company` can see all of the rooms associated with their company. However, if they do not have a role for which the **Add documents to room** permission is set to **true,** they can't add documents to those rooms.
	//
	// Valid values are:
	//
	// - `Company`: The user has access to rooms, and if they have permission to manage users, they have access to users across the entire company. What they can do in the rooms and with users is controlled by their permissions. This is the default for the Users::InviteClassicAdmin method.
	// - `Region`: The user has access to rooms and, if they have permission to manage users, they have access to users across their regions.
	// - `Office`: The user has access to rooms and, if they have permission to manage users, they have access to users across their offices.
	// - `Contributor`: The user has access only to their own rooms and those to which they are invited. They cannot perform any user management actions because they do not oversee other users. For example, agents typically have the `Contributor` access level.
	//
	// **Note:** In requests, the values that you may use for this property depend on your permissions and whether you can add users at your access level or lower.
	AccessLevel string `json:"accessLevel,omitempty"`
	// The ID of the user's default office.
	DefaultOfficeID int32 `json:"defaultOfficeId,omitempty"`
	// The user's email address.
	Email string `json:"email,omitempty"`
	// The user's first name.
	FirstName string `json:"firstName,omitempty"`
	// When **true,** an administrator has locked the user's account. For example, an administrator might want to lock an agent's account after they leave the brokerage until they determine how to transfer the agent's rooms and data to another active user.
	IsLockedOut bool `json:"isLockedOut,omitempty"`
	// The user's last name.
	LastName string `json:"lastName,omitempty"`
	// An array of office IDs for the offices in which a user with an `Office` or `Contributor` `accessLevel` has been granted the ability to participate.
	Offices []int `json:"offices,omitempty"`
	// This object is deprecated in Rooms Version 6.
	Permissions *ClassicManagerPermissions `json:"permissions,omitempty"`
	// The URL for the user's profile image.
	ProfileImageURL string `json:"profileImageUrl,omitempty"`
	// An array of region IDs for the regions in which a user with the `Region accessLevel` has been granted the ability to participate.
	Regions []int `json:"regions,omitempty"`
	// The ID of the company role assigned to the user. You can assign external roles to users who aren't a part of your organization.
	RoleID int32 `json:"roleId,omitempty"`
	// The user's status. This property is read-only. Possible values are:
	//
	// - `Active`: The user is active.
	// - `Pending`: The user has been invited but has not yet accepted the invitation.
	Status string `json:"status,omitempty"`
	// This field is deprecated in Rooms Version 6.
	TitleID int32 `json:"titleId,omitempty"`
	// The ID of the user.
	UserID int32 `json:"userId,omitempty"`
}

// UserForUpdate this request object contains the information to use to update a user's default office.
type UserForUpdate struct {
	// (Required) The ID of the user's default office.
	DefaultOfficeID int32 `json:"defaultOfficeId,omitempty"`
}

// UserSummary contains details about a user.
type UserSummary struct {
	// The user's level of access to the account. This property determines what the user can see in the system.
	//
	// In contrast, a user's permissions determine the actions that they can take in a room. For example, a user who has `accessLevel` set to `Company` can see all of the rooms associated with their company. However, if they do not have a role for which the **Add documents to room** permission is set to **true,** they can't add documents to those rooms.
	//
	// Valid values are:
	//
	// - `Company`: The user has access to rooms, and if they have permission to manage users, they have access to users across the entire company. What they can do in the rooms and with users is controlled by their permissions. This is the default for the Users::InviteClassicAdmin method.
	// - `Region`: The user has access to rooms and, if they have permission to manage users, they have access to users across their regions.
	// - `Office`: The user has access to rooms and, if they have permission to manage users, they have access to users across their offices.
	// - `Contributor`: The user has access only to their own rooms and those to which they are invited. They cannot perform any user management actions because they do not oversee other users. For example, agents typically have the `Contributor` access level.
	//
	// **Note:** In requests, the values that you may use for this property depend on your permissions and whether you can add users at your access level or lower.
	AccessLevel string `json:"accessLevel,omitempty"`
	// The ID of the user's default office.
	DefaultOfficeID int32 `json:"defaultOfficeId,omitempty"`
	// The user's email address.
	Email string `json:"email,omitempty"`
	// The user's first name.
	FirstName string `json:"firstName,omitempty"`
	// When **true,** an administrator has locked the user's account. For example, an administrator might want to lock an agent's account after they leave the brokerage until they determine how to transfer the agent's rooms and data to another active user.
	IsLockedOut bool `json:"isLockedOut,omitempty"`
	// The user's last name.
	LastName string `json:"lastName,omitempty"`
	// The URL for the user's profile image.
	ProfileImageURL string `json:"profileImageUrl,omitempty"`
	// The ID of the company role assigned to the user.
	//
	// You can assign external roles to users who aren't a part of your organization.
	RoleID int32 `json:"roleId,omitempty"`
	// The user's status. Possible values are:
	//
	// - `Active`
	// - `Pending`
	Status string `json:"status,omitempty"`
	// This field is deprecated in Rooms Version 6.
	TitleID int32 `json:"titleId,omitempty"`
	// The ID of the user.
	UserID int32 `json:"userId,omitempty"`
}

// UserSummaryList contains a list of users.
type UserSummaryList struct {
	// The last zero-based index position in the result set.
	EndPosition int32 `json:"endPosition,omitempty"`
	// The URI for the next chunk of records based on the search request. This property is `null` for the last set of search results.
	NextURI string `json:"nextUri,omitempty"`
	// The URI for the previous chunk of records based on the search request. This property is `null` for the first set of search results.
	PriorURI string `json:"priorUri,omitempty"`
	// The number of results returned in this response.
	ResultSetSize int32 `json:"resultSetSize,omitempty"`
	// The starting zero-based index position of the results set. When this property is used as a query parameter, the default value is `0`.
	StartPosition int32 `json:"startPosition,omitempty"`
	//
	TotalRowCount int32 `json:"totalRowCount,omitempty"`
	// A list of users.
	UserSummaries []UserSummary `json:"userSummaries,omitempty"`
}

// UserToInvite this request object contains information about the user that you are inviting.
type UserToInvite struct {
	// (Required) The user's level of access to the account. This property determines what the user can see in the system.
	//
	// In contrast, a user's permissions determine the actions that they can take in a room. For example, a user who has `accessLevel` set to `Company` can see all of the rooms associated with their company. However, if they do not have a role for which the **Add documents to room** permission is set to **true,** they can't add documents to those rooms.
	//
	// Valid values are:
	//
	// - `Company`: The user has access to rooms, and if they have permission to manage users, they have access to users across the entire company. What they can do in the rooms and with users is controlled by their permissions.
	// - `Region`: The user has access to rooms and, and if they have permission to manage users, they have access to users across their regions.
	// - `Office`: The user has access to rooms, and if they have permission to manage users, they have access to users across their regions.
	// - `Contributor`: The user has access only to their own rooms and those to which they are invited. They cannot perform any user management actions because they do not oversee other users. For example, agents typically have the `Contributor` access level.
	//
	// **Note:** In requests, the values that you may use for this property depend on your permissions and whether you can add users at your access level or lower.
	AccessLevel string `json:"accessLevel,omitempty"`
	// (Required) The ID of the user's default office.
	DefaultOfficeID int32 `json:"defaultOfficeId,omitempty"`
	// (Required) When an administrator or authorized member invites a new user to become an account member, the system also creates an eSignature account for the invitee at the same time. The eSignPermissionProfileId is the ID of the eSignature permission set to assign to the member.
	ESignPermissionProfileID string `json:"eSignPermissionProfileId,omitempty"`
	// (Required) The user's email address.
	Email string `json:"email,omitempty"`
	// (Required) The user's first name.
	FirstName string `json:"firstName,omitempty"`
	// (Required) The user's last name.
	LastName string `json:"lastName,omitempty"`
	// An array of office IDs for the offices in which a user with an `Office` or `Contributor` `accessLevel` has been granted the ability to participate. If the value for `accessLevel` is `Office`, this property is required.
	Offices []int `json:"offices,omitempty"`
	// URL to redirect to after inviting.
	RedirectURL string `json:"redirectUrl,omitempty"`
	// An array of region IDs for the regions in which a user with the `Region accessLevel` has been granted the ability to participate. If the value for `accessLevel` is `Region`, this property is required.
	Regions []int `json:"regions,omitempty"`
	// (Required) The ID of the company role assigned to the user.
	//
	// You can assign external roles to users who are not part of your organization.
	//
	RoleID int32 `json:"roleId,omitempty"`
	//
	SubscribeToRoomsActivityNotifications bool `json:"subscribeToRoomsActivityNotifications,omitempty"`
}
