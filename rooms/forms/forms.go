// Copyright 2022 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package forms implements the DocuSign SDK
// category Forms.
//
// ## Form groups
//
// With the appropriate permissions, form administrators at your company can create form groups, or curated set of forms gathered from the association **form libraries** to which DocuSign provides access. Form groups enable agents to know which forms to add to rooms based on the type of transaction they are working on. When creating groups, administrators can make certain forms required, ensuring compliance. If you don't create groups, agents will have to choose forms they need from a list of association forms.
//
// ## Permissions
//
// To manage forms, you must have the `canManageFormGroups` permission, which enables you to access the **Forms** tab in **Admin.** For all other roles, assign permissions based on how these users will be working with forms. If no form permissions are enabled for these roles, users cannot add forms to rooms.
//
// Form administrators must have the `canManageFormGroups` permission assigned to their user role. This gives them access to the **Forms** tab in **Admin.** However, you should also consider the user's access level. For example, if the user has access to specific offices, they can only administer form groups for those offices.
//
// Service Api documentation may be found at:
// https://developers.docusign.com/docs/rooms-api/reference/Forms
// Usage example:
//
//	import (
//	    "github.com/jfcote87/esign"
//	    "github.com/jfcote87/esign/rooms"
//	)
//	...
//	formsService := forms.New(esignCredential)
package forms // import "github.com/jfcote87/esignrooms//forms"

import (
	"context"
	"fmt"
	"io"
	"net/url"
	"strings"

	"github.com/jfcote87/esign"
	"github.com/jfcote87/esign/rooms"
)

// Service implements DocuSign Forms API operations
type Service struct {
	credential esign.Credential
}

// New initializes a forms service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// CreateExternalFormFillSession creates an external form fill session.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/externalformfillsessions/createexternalformfillsession
//
// SDK Method Forms::CreateExternalFormFillSession
func (s *Service) CreateExternalFormFillSession(body *rooms.ExternalFormFillSessionForCreate) *CreateExternalFormFillSessionOp {
	return &CreateExternalFormFillSessionOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       "external_form_fill_sessions",
		Payload:    body,
		Accept:     "application/json-patch+json, application/json, text/json, application/*+json, application/xml, text/xml, application/*+xml",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// CreateExternalFormFillSessionOp implements DocuSign API SDK Forms::CreateExternalFormFillSession
type CreateExternalFormFillSessionOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateExternalFormFillSessionOp) Do(ctx context.Context) (*rooms.ExternalFormFillSession, error) {
	var res *rooms.ExternalFormFillSession
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetFormDetails gets form details.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formdetails/getformdetails
//
// SDK Method Forms::GetFormDetails
func (s *Service) GetFormDetails(formID string) *GetFormDetailsOp {
	return &GetFormDetailsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"forms", formID, "details"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// GetFormDetailsOp implements DocuSign API SDK Forms::GetFormDetails
type GetFormDetailsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetFormDetailsOp) Do(ctx context.Context) (*rooms.FormDetails, error) {
	var res *rooms.FormDetails
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetFormGroupForms gets the user's form group forms.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/getformgroupforms
//
// SDK Method Forms::GetFormGroupForms
func (s *Service) GetFormGroupForms(formGroupID string) *GetFormGroupFormsOp {
	return &GetFormGroupFormsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"form_groups", formGroupID, "forms"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// GetFormGroupFormsOp implements DocuSign API SDK Forms::GetFormGroupForms
type GetFormGroupFormsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetFormGroupFormsOp) Do(ctx context.Context) (*rooms.FormGroupFormList, error) {
	var res *rooms.FormGroupFormList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count is the number of results to return.
// Default value is 100 and max value is 100
func (op *GetFormGroupFormsOp) Count(val int) *GetFormGroupFormsOp {
	if op != nil {
		op.QueryOpts.Set("count", fmt.Sprintf("%d", val))
	}
	return op
}

// StartPosition is the starting point of the list. The default is 0.
func (op *GetFormGroupFormsOp) StartPosition(val int) *GetFormGroupFormsOp {
	if op != nil {
		op.QueryOpts.Set("startPosition", fmt.Sprintf("%d", val))
	}
	return op
}

// AssignFormGroupForm assigns a form to a form group.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/assignformgroupform
//
// SDK Method Forms::AssignFormGroupForm
func (s *Service) AssignFormGroupForm(formGroupID string, body *rooms.FormGroupFormToAssign) *AssignFormGroupFormOp {
	return &AssignFormGroupFormOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"form_groups", formGroupID, "assign_form"}, "/"),
		Payload:    body,
		Accept:     "application/json-patch+json, application/json, text/json, application/*+json, application/xml, text/xml, application/*+xml",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// AssignFormGroupFormOp implements DocuSign API SDK Forms::AssignFormGroupForm
type AssignFormGroupFormOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *AssignFormGroupFormOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// CreateFormGroup creates a form group.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/createformgroup
//
// SDK Method Forms::CreateFormGroup
func (s *Service) CreateFormGroup(body *rooms.FormGroupForCreate) *CreateFormGroupOp {
	return &CreateFormGroupOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       "form_groups",
		Payload:    body,
		Accept:     "application/json-patch+json, application/json, text/json, application/*+json, application/xml, text/xml, application/*+xml",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// CreateFormGroupOp implements DocuSign API SDK Forms::CreateFormGroup
type CreateFormGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateFormGroupOp) Do(ctx context.Context) (*rooms.FormGroup, error) {
	var res *rooms.FormGroup
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// DeleteFormGroup deletes a form group.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/deleteformgroup
//
// SDK Method Forms::DeleteFormGroup
func (s *Service) DeleteFormGroup(formGroupID string) *DeleteFormGroupOp {
	return &DeleteFormGroupOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"form_groups", formGroupID}, "/"),
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// DeleteFormGroupOp implements DocuSign API SDK Forms::DeleteFormGroup
type DeleteFormGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteFormGroupOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// GetFormGroup gets a form group.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/getformgroup
//
// SDK Method Forms::GetFormGroup
func (s *Service) GetFormGroup(formGroupID string) *GetFormGroupOp {
	return &GetFormGroupOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"form_groups", formGroupID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// GetFormGroupOp implements DocuSign API SDK Forms::GetFormGroup
type GetFormGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetFormGroupOp) Do(ctx context.Context) (*rooms.FormGroup, error) {
	var res *rooms.FormGroup
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetFormGroups gets form groups.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/getformgroups
//
// SDK Method Forms::GetFormGroups
func (s *Service) GetFormGroups() *GetFormGroupsOp {
	return &GetFormGroupsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "form_groups",
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// GetFormGroupsOp implements DocuSign API SDK Forms::GetFormGroups
type GetFormGroupsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetFormGroupsOp) Do(ctx context.Context) (*rooms.FormGroupSummaryList, error) {
	var res *rooms.FormGroupSummaryList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count is the number of results to return. This value must be a number between `1` and `100` (default).
func (op *GetFormGroupsOp) Count(val int) *GetFormGroupsOp {
	if op != nil {
		op.QueryOpts.Set("count", fmt.Sprintf("%d", val))
	}
	return op
}

// StartPosition is the starting zero-based index position of the results set. The default value is `0`.
func (op *GetFormGroupsOp) StartPosition(val int) *GetFormGroupsOp {
	if op != nil {
		op.QueryOpts.Set("startPosition", fmt.Sprintf("%d", val))
	}
	return op
}

// GrantOfficeAccessToFormGroup grants an office access to a form group.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/grantofficeaccesstoformgroup
//
// SDK Method Forms::GrantOfficeAccessToFormGroup
func (s *Service) GrantOfficeAccessToFormGroup(formGroupID string, officeID string, media io.Reader, mimeType string) *GrantOfficeAccessToFormGroupOp {
	return &GrantOfficeAccessToFormGroupOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"form_groups", formGroupID, "grant_office_access", officeID}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// GrantOfficeAccessToFormGroupOp implements DocuSign API SDK Forms::GrantOfficeAccessToFormGroup
type GrantOfficeAccessToFormGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GrantOfficeAccessToFormGroupOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// RemoveFormGroupForm removes a form from a form group.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/removeformgroupform
//
// SDK Method Forms::RemoveFormGroupForm
func (s *Service) RemoveFormGroupForm(formGroupID string, formID string, media io.Reader, mimeType string) *RemoveFormGroupFormOp {
	return &RemoveFormGroupFormOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"form_groups", formGroupID, "unassign_form", formID}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// RemoveFormGroupFormOp implements DocuSign API SDK Forms::RemoveFormGroupForm
type RemoveFormGroupFormOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *RemoveFormGroupFormOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// RenameFormGroup renames a form group.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/renameformgroup
//
// SDK Method Forms::RenameFormGroup
func (s *Service) RenameFormGroup(formGroupID string, body *rooms.FormGroupForUpdate) *RenameFormGroupOp {
	return &RenameFormGroupOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"form_groups", formGroupID}, "/"),
		Payload:    body,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// RenameFormGroupOp implements DocuSign API SDK Forms::RenameFormGroup
type RenameFormGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *RenameFormGroupOp) Do(ctx context.Context) (*rooms.FormGroup, error) {
	var res *rooms.FormGroup
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// RevokeOfficeAccessFromFormGroup revoke an office's access to a form group.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formgroups/revokeofficeaccessfromformgroup
//
// SDK Method Forms::RevokeOfficeAccessFromFormGroup
func (s *Service) RevokeOfficeAccessFromFormGroup(formGroupID string, officeID string, media io.Reader, mimeType string) *RevokeOfficeAccessFromFormGroupOp {
	return &RevokeOfficeAccessFromFormGroupOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"form_groups", formGroupID, "revoke_office_access", officeID}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// RevokeOfficeAccessFromFormGroupOp implements DocuSign API SDK Forms::RevokeOfficeAccessFromFormGroup
type RevokeOfficeAccessFromFormGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *RevokeOfficeAccessFromFormGroupOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// GetFormLibraries gets form libraries.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formlibraries/getformlibraries
//
// SDK Method Forms::GetFormLibraries
func (s *Service) GetFormLibraries() *GetFormLibrariesOp {
	return &GetFormLibrariesOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "form_libraries",
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// GetFormLibrariesOp implements DocuSign API SDK Forms::GetFormLibraries
type GetFormLibrariesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetFormLibrariesOp) Do(ctx context.Context) (*rooms.FormLibrarySummaryList, error) {
	var res *rooms.FormLibrarySummaryList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count is the number of results to return. This value must be a number between `1` and `100` (default).
func (op *GetFormLibrariesOp) Count(val int) *GetFormLibrariesOp {
	if op != nil {
		op.QueryOpts.Set("count", fmt.Sprintf("%d", val))
	}
	return op
}

// StartPosition is the starting zero-based index position of the results set. The default value is `0`.
func (op *GetFormLibrariesOp) StartPosition(val int) *GetFormLibrariesOp {
	if op != nil {
		op.QueryOpts.Set("startPosition", fmt.Sprintf("%d", val))
	}
	return op
}

// GetFormLibraryForms gets the forms in a form library.
//
// https://developers.docusign.com/docs/rooms-api/reference/forms/formlibraries/getformlibraryforms
//
// SDK Method Forms::GetFormLibraryForms
func (s *Service) GetFormLibraryForms(formLibraryID string) *GetFormLibraryFormsOp {
	return &GetFormLibraryFormsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"form_libraries", formLibraryID, "forms"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// GetFormLibraryFormsOp implements DocuSign API SDK Forms::GetFormLibraryForms
type GetFormLibraryFormsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetFormLibraryFormsOp) Do(ctx context.Context) (*rooms.FormSummaryList, error) {
	var res *rooms.FormSummaryList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count is the number of results to return. This value must be a number between `1` and `100` (default).
func (op *GetFormLibraryFormsOp) Count(val int) *GetFormLibraryFormsOp {
	if op != nil {
		op.QueryOpts.Set("count", fmt.Sprintf("%d", val))
	}
	return op
}

// StartPosition (Optional) The starting zero-based index position of the results set. The default value is `0`.
func (op *GetFormLibraryFormsOp) StartPosition(val int) *GetFormLibraryFormsOp {
	if op != nil {
		op.QueryOpts.Set("startPosition", fmt.Sprintf("%d", val))
	}
	return op
}
