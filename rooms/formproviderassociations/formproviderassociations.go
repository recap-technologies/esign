// Copyright 2022 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package formproviderassociations implements the DocuSign SDK
// category FormProviderAssociations.
//
// Service Api documentation may be found at:
// https://developers.docusign.com/docs/rooms-api/reference/FormProviderAssociations
// Usage example:
//
//	import (
//	    "github.com/jfcote87/esign"
//	    "github.com/jfcote87/esign/rooms"
//	)
//	...
//	formproviderassociationsService := formproviderassociations.New(esignCredential)
package formproviderassociations // import "github.com/jfcote87/esignrooms//formproviderassociations"

import (
	"context"
	"fmt"
	"net/url"
	"strings"

	"github.com/jfcote87/esign"
	"github.com/jfcote87/esign/rooms"
)

// Service implements DocuSign FormProviderAssociations API operations
type Service struct {
	credential esign.Credential
}

// New initializes a formproviderassociations service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// GetFormProviderAssociations gets all associations by provider.
//
// https://developers.docusign.com/docs/rooms-api/reference/formproviderassociations/formproviders/getformproviderassociations
//
// SDK Method FormProviderAssociations::GetFormProviderAssociations
func (s *Service) GetFormProviderAssociations(providerID string) *GetFormProviderAssociationsOp {
	return &GetFormProviderAssociationsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"form_providers", providerID, "associations"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.RoomsV2,
	}
}

// GetFormProviderAssociationsOp implements DocuSign API SDK FormProviderAssociations::GetFormProviderAssociations
type GetFormProviderAssociationsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetFormProviderAssociationsOp) Do(ctx context.Context) (*rooms.FormProviderAssociationsSummaryList, error) {
	var res *rooms.FormProviderAssociationsSummaryList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count is the total number of associations to be returned.
func (op *GetFormProviderAssociationsOp) Count(val int) *GetFormProviderAssociationsOp {
	if op != nil {
		op.QueryOpts.Set("count", fmt.Sprintf("%d", val))
	}
	return op
}

// StartPosition is the starting position on the list.
func (op *GetFormProviderAssociationsOp) StartPosition(val int) *GetFormProviderAssociationsOp {
	if op != nil {
		op.QueryOpts.Set("startPosition", fmt.Sprintf("%d", val))
	}
	return op
}
