// Copyright 2022 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package usermanagement implements the DocuSign SDK
// category UserManagement.
//
// Methods to manage users in an account.
//
// Service Api documentation may be found at:
// https://developers.docusign.com/docs/admin-api/reference/UserManagement
// Usage example:
//
//	import (
//	    "github.com/jfcote87/esign"
//	    "github.com/jfcote87/esign/admin"
//	)
//	...
//	usermanagementService := usermanagement.New(esignCredential)
package usermanagement // import "github.com/jfcote87/esignadmin/usermanagement"

import (
	"context"
	"fmt"
	"net/url"
	"strings"

	"github.com/jfcote87/esign"
	"github.com/jfcote87/esign/admin"
)

// Service implements DocuSign UserManagement API operations
type Service struct {
	credential esign.Credential
}

// New initializes a usermanagement service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// GetGroups returns the list of groups in an account.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/getgroups
//
// SDK Method UserManagement::getGroups
func (s *Service) GetGroups(organizationID string) *GetGroupsOp {
	return &GetGroupsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "accounts", "{accountId}", "groups"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetGroupsOp implements DocuSign API SDK UserManagement::getGroups
type GetGroupsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetGroupsOp) Do(ctx context.Context) (*admin.MemberGroupsResponse, error) {
	var res *admin.MemberGroupsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Start index of first item to include in the response. The default value is 0.
func (op *GetGroupsOp) Start(val int) *GetGroupsOp {
	if op != nil {
		op.QueryOpts.Set("start", fmt.Sprintf("%d", val))
	}
	return op
}

// Take page size of the response. The default value is 20.
func (op *GetGroupsOp) Take(val int) *GetGroupsOp {
	if op != nil {
		op.QueryOpts.Set("take", fmt.Sprintf("%d", val))
	}
	return op
}

// End index of the last item to include in the response. Ignored if `take` parameter is specified.
func (op *GetGroupsOp) End(val int) *GetGroupsOp {
	if op != nil {
		op.QueryOpts.Set("end", fmt.Sprintf("%d", val))
	}
	return op
}

// GetPermissions returns the list of permission profiles in an account.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/getpermissions
//
// SDK Method UserManagement::getPermissions
func (s *Service) GetPermissions(organizationID string) *GetPermissionsOp {
	return &GetPermissionsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "accounts", "{accountId}", "permissions"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetPermissionsOp implements DocuSign API SDK UserManagement::getPermissions
type GetPermissionsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetPermissionsOp) Do(ctx context.Context) (*admin.PermissionsResponse, error) {
	var res *admin.PermissionsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// AddDSGroup creates a new DSGroup.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/adddsgroup
//
// SDK Method UserManagement::addDSGroup
func (s *Service) AddDSGroup(organizationID string, addRequest *admin.DSGroupAddRequest) *AddDSGroupOp {
	return &AddDSGroupOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "dsgroups"}, "/"),
		Payload:    addRequest,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// AddDSGroupOp implements DocuSign API SDK UserManagement::addDSGroup
type AddDSGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *AddDSGroupOp) Do(ctx context.Context) (*admin.DSGroupResponse, error) {
	var res *admin.DSGroupResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// AddDSGroupUsers adds a list of users to a DSGroup.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/adddsgroupusers
//
// SDK Method UserManagement::addDSGroupUsers
func (s *Service) AddDSGroupUsers(organizationID string, dsGroupID string, dSGroupUsersAddRequest *admin.DSGroupUsersAddRequest) *AddDSGroupUsersOp {
	return &AddDSGroupUsersOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "dsgroups", dsGroupID, "users"}, "/"),
		Payload:    dSGroupUsersAddRequest,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// AddDSGroupUsersOp implements DocuSign API SDK UserManagement::addDSGroupUsers
type AddDSGroupUsersOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *AddDSGroupUsersOp) Do(ctx context.Context) (*admin.AddDSGroupAndUsersResponse, error) {
	var res *admin.AddDSGroupAndUsersResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// DeleteDSGroup deletes a DSGroup.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/deletedsgroup
//
// SDK Method UserManagement::deleteDSGroup
func (s *Service) DeleteDSGroup(organizationID string, dsGroupID string) *DeleteDSGroupOp {
	return &DeleteDSGroupOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "dsgroups", dsGroupID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// DeleteDSGroupOp implements DocuSign API SDK UserManagement::deleteDSGroup
type DeleteDSGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteDSGroupOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// GetDSGroup returns details about a single DSGroup.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/getdsgroup
//
// SDK Method UserManagement::getDSGroup
func (s *Service) GetDSGroup(organizationID string, dsGroupID string) *GetDSGroupOp {
	return &GetDSGroupOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "dsgroups", dsGroupID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetDSGroupOp implements DocuSign API SDK UserManagement::getDSGroup
type GetDSGroupOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetDSGroupOp) Do(ctx context.Context) (*admin.DSGroupResponse, error) {
	var res *admin.DSGroupResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetDSGroupUsers gets a list of users in a DSGroup.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/getdsgroupusers
//
// SDK Method UserManagement::getDSGroupUsers
func (s *Service) GetDSGroupUsers(organizationID string, dsGroupID string) *GetDSGroupUsersOp {
	return &GetDSGroupUsersOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "dsgroups", dsGroupID, "users"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetDSGroupUsersOp implements DocuSign API SDK UserManagement::getDSGroupUsers
type GetDSGroupUsersOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetDSGroupUsersOp) Do(ctx context.Context) (*admin.DSGroupAndUsersResponse, error) {
	var res *admin.DSGroupAndUsersResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Page start page of DSGroups.
func (op *GetDSGroupUsersOp) Page(val int) *GetDSGroupUsersOp {
	if op != nil {
		op.QueryOpts.Set("page", fmt.Sprintf("%d", val))
	}
	return op
}

// PageSize page size of DSGroups.
func (op *GetDSGroupUsersOp) PageSize(val int) *GetDSGroupUsersOp {
	if op != nil {
		op.QueryOpts.Set("page_size", fmt.Sprintf("%d", val))
	}
	return op
}

// GetDSGroups returns a list of DSGroups.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/getdsgroups
//
// SDK Method UserManagement::getDSGroups
func (s *Service) GetDSGroups(organizationID string) *GetDSGroupsOp {
	return &GetDSGroupsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "dsgroups"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetDSGroupsOp implements DocuSign API SDK UserManagement::getDSGroups
type GetDSGroupsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetDSGroupsOp) Do(ctx context.Context) (*admin.DSGroupListResponse, error) {
	var res *admin.DSGroupListResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Page start page of DSGroups.
func (op *GetDSGroupsOp) Page(val int) *GetDSGroupsOp {
	if op != nil {
		op.QueryOpts.Set("page", fmt.Sprintf("%d", val))
	}
	return op
}

// PageSize page size of DSGroups.
func (op *GetDSGroupsOp) PageSize(val int) *GetDSGroupsOp {
	if op != nil {
		op.QueryOpts.Set("page_size", fmt.Sprintf("%d", val))
	}
	return op
}

// RemoveDSGroupUsers removes a list of users from a DSGroup.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/removedsgroupusers
//
// SDK Method UserManagement::removeDSGroupUsers
func (s *Service) RemoveDSGroupUsers(organizationID string, dsGroupID string, dSGroupUsersRemoveRequest *admin.DSGroupUsersRemoveRequest) *RemoveDSGroupUsersOp {
	return &RemoveDSGroupUsersOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "dsgroups", dsGroupID, "users"}, "/"),
		Payload:    dSGroupUsersRemoveRequest,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// RemoveDSGroupUsersOp implements DocuSign API SDK UserManagement::removeDSGroupUsers
type RemoveDSGroupUsersOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *RemoveDSGroupUsersOp) Do(ctx context.Context) (*admin.RemoveDSGroupUsersResponse, error) {
	var res *admin.RemoveDSGroupUsersResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// AddUserProductPermissionProfiles assigns user to permission profiles for one or more products.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/adduserproductpermissionprofiles
//
// SDK Method UserManagement::addUserProductPermissionProfiles
func (s *Service) AddUserProductPermissionProfiles(organizationID string, userID string, productPermissionProfilesRequest *admin.ProductPermissionProfilesRequest) *AddUserProductPermissionProfilesOp {
	return &AddUserProductPermissionProfilesOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "products", "users", userID, "permission_profiles"}, "/"),
		Payload:    productPermissionProfilesRequest,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// AddUserProductPermissionProfilesOp implements DocuSign API SDK UserManagement::addUserProductPermissionProfiles
type AddUserProductPermissionProfilesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *AddUserProductPermissionProfilesOp) Do(ctx context.Context) (*admin.UserProductPermissionProfilesResponse, error) {
	var res *admin.UserProductPermissionProfilesResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetProductPermissionProfiles gets products associated with the account and the available permission profiles.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/getproductpermissionprofiles
//
// SDK Method UserManagement::getProductPermissionProfiles
func (s *Service) GetProductPermissionProfiles(organizationID string) *GetProductPermissionProfilesOp {
	return &GetProductPermissionProfilesOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "products", "permission_profiles"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetProductPermissionProfilesOp implements DocuSign API SDK UserManagement::getProductPermissionProfiles
type GetProductPermissionProfilesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetProductPermissionProfilesOp) Do(ctx context.Context) (*admin.ProductPermissionProfilesResponse, error) {
	var res *admin.ProductPermissionProfilesResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetUserProductPermissionProfiles retrieves a list of user's permission profiles for each account's product.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/getuserproductpermissionprofiles
//
// SDK Method UserManagement::getUserProductPermissionProfiles
func (s *Service) GetUserProductPermissionProfiles(organizationID string, userID string) *GetUserProductPermissionProfilesOp {
	return &GetUserProductPermissionProfilesOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "products", "users", userID, "permission_profiles"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetUserProductPermissionProfilesOp implements DocuSign API SDK UserManagement::getUserProductPermissionProfiles
type GetUserProductPermissionProfilesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetUserProductPermissionProfilesOp) Do(ctx context.Context) (*admin.ProductPermissionProfilesResponse, error) {
	var res *admin.ProductPermissionProfilesResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// AddOrUpdateUser creates and updates a multi-product user.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/multiproductusermanagement/addorupdateuser
//
// SDK Method UserManagement::addOrUpdateUser
func (s *Service) AddOrUpdateUser(organizationID string, request *admin.NewMultiProductUserAddRequest) *AddOrUpdateUserOp {
	return &AddOrUpdateUserOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2.1", "organizations", organizationID, "accounts", "{accountId}", "users"}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// AddOrUpdateUserOp implements DocuSign API SDK UserManagement::addOrUpdateUser
type AddOrUpdateUserOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *AddOrUpdateUserOp) Do(ctx context.Context) (*admin.AddUserResponse, error) {
	var res *admin.AddUserResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetUsers returns information about the users in an organization.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/users/getusers
//
// SDK Method UserManagement::getUsers
func (s *Service) GetUsers(organizationID string) *GetUsersOp {
	return &GetUsersOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "users"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetUsersOp implements DocuSign API SDK UserManagement::getUsers
type GetUsersOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetUsersOp) Do(ctx context.Context) (*admin.OrganizationUsersResponse, error) {
	var res *admin.OrganizationUsersResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Start index of first item to include in the response. The default value is 0.
func (op *GetUsersOp) Start(val int) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("start", fmt.Sprintf("%d", val))
	}
	return op
}

// Take page size of the response. The default value is 20.
func (op *GetUsersOp) Take(val int) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("take", fmt.Sprintf("%d", val))
	}
	return op
}

// End index of the last item to include in the response. Ignored if `take` parameter is specified.
func (op *GetUsersOp) End(val int) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("end", fmt.Sprintf("%d", val))
	}
	return op
}

// Email email address of the desired user. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
func (op *GetUsersOp) Email(val string) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("email", val)
	}
	return op
}

// EmailUserNameLike selects users by pattern matching on the user's email address
func (op *GetUsersOp) EmailUserNameLike(val string) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("email_user_name_like", val)
	}
	return op
}

// Status status.
func (op *GetUsersOp) Status(val string) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("status", val)
	}
	return op
}

// MembershipStatus is the user's membership status. One of:
//
// - `activation_required`
// - `activation_sent`
// - `active`
// - `closed`
// - `disabled`
func (op *GetUsersOp) MembershipStatus(val string) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("membership_status", val)
	}
	return op
}

// AccountID select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
func (op *GetUsersOp) AccountID(val string) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("account_id", val)
	}
	return op
}

// OrganizationReservedDomainID select users that are in the specified domain. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
func (op *GetUsersOp) OrganizationReservedDomainID(val string) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("organization_reserved_domain_id", val)
	}
	return op
}

// LastModifiedSince select users whose data have been modified since the date specified. `account_id` or `organization_reserved_domain_id` must be specified.
func (op *GetUsersOp) LastModifiedSince(val string) *GetUsersOp {
	if op != nil {
		op.QueryOpts.Set("last_modified_since", val)
	}
	return op
}

// UpdateEmailAddress updates a user's email address.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/users/updateemailaddress
//
// SDK Method UserManagement::updateEmailAddress
func (s *Service) UpdateEmailAddress(organizationID string, request *admin.UpdateUsersEmailRequest) *UpdateEmailAddressOp {
	return &UpdateEmailAddressOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "users", "email_addresses"}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// UpdateEmailAddressOp implements DocuSign API SDK UserManagement::updateEmailAddress
type UpdateEmailAddressOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UpdateEmailAddressOp) Do(ctx context.Context) (*admin.UsersUpdateResponse, error) {
	var res *admin.UsersUpdateResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ActivateMembership activates user memberships.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/activatemembership
//
// SDK Method UserManagement::activateMembership
func (s *Service) ActivateMembership(organizationID string, userID string, membershipID string, request *admin.ForceActivateMembershipRequest) *ActivateMembershipOp {
	return &ActivateMembershipOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "users", userID, "memberships", membershipID}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// ActivateMembershipOp implements DocuSign API SDK UserManagement::activateMembership
type ActivateMembershipOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ActivateMembershipOp) Do(ctx context.Context) (*admin.UpdateResponse, error) {
	var res *admin.UpdateResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// AddUsers adds users to an account.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/addusers
//
// SDK Method UserManagement::addUsers
func (s *Service) AddUsers(organizationID string, request *admin.NewAccountUserRequest) *AddUsersOp {
	return &AddUsersOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "accounts", "{accountId}", "users"}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// AddUsersOp implements DocuSign API SDK UserManagement::addUsers
type AddUsersOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *AddUsersOp) Do(ctx context.Context) (*admin.NewUserResponse, error) {
	var res *admin.NewUserResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CloseMemberships closes a user's memberships.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/closememberships
//
// SDK Method UserManagement::closeMemberships
func (s *Service) CloseMemberships(organizationID string, userID string, request *admin.DeleteMembershipsRequest) *CloseMembershipsOp {
	return &CloseMembershipsOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "users", userID, "accounts"}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// CloseMembershipsOp implements DocuSign API SDK UserManagement::closeMemberships
type CloseMembershipsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CloseMembershipsOp) Do(ctx context.Context) (*admin.DeleteMembershipsResponse, error) {
	var res *admin.DeleteMembershipsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CreateUser creates a new user.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/createuser
//
// SDK Method UserManagement::createUser
func (s *Service) CreateUser(organizationID string, request *admin.NewUserRequest) *CreateUserOp {
	return &CreateUserOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "users"}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// CreateUserOp implements DocuSign API SDK UserManagement::createUser
type CreateUserOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateUserOp) Do(ctx context.Context) (*admin.NewUserResponse, error) {
	var res *admin.NewUserResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// DeleteIdentities deletes user identities.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/deleteidentities
//
// SDK Method UserManagement::deleteIdentities
func (s *Service) DeleteIdentities(organizationID string, userID string, requestModel *admin.DeleteUserIdentityRequest) *DeleteIdentitiesOp {
	return &DeleteIdentitiesOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "users", userID, "identities"}, "/"),
		Payload:    requestModel,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// DeleteIdentitiesOp implements DocuSign API SDK UserManagement::deleteIdentities
type DeleteIdentitiesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteIdentitiesOp) Do(ctx context.Context) (*admin.DeleteResponse, error) {
	var res *admin.DeleteResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetUserProfiles returns information about recently modified users.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/getuserprofiles
//
// SDK Method UserManagement::getUserProfiles
func (s *Service) GetUserProfiles(organizationID string) *GetUserProfilesOp {
	return &GetUserProfilesOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "users", "profile"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetUserProfilesOp implements DocuSign API SDK UserManagement::getUserProfiles
type GetUserProfilesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetUserProfilesOp) Do(ctx context.Context) (*admin.UsersDrilldownResponse, error) {
	var res *admin.UsersDrilldownResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Email is the email address associated with the users you want to retrieve.
func (op *GetUserProfilesOp) Email(val string) *GetUserProfilesOp {
	if op != nil {
		op.QueryOpts.Set("email", val)
	}
	return op
}

// UpdateUser updates a user's information.
//
// https://developers.docusign.com/docs/admin-api/reference/usermanagement/esignusermanagement/updateuser
//
// SDK Method UserManagement::updateUser
func (s *Service) UpdateUser(organizationID string, request *admin.UpdateUsersRequest) *UpdateUserOp {
	return &UpdateUserOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "users", "profiles"}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// UpdateUserOp implements DocuSign API SDK UserManagement::updateUser
type UpdateUserOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UpdateUserOp) Do(ctx context.Context) (*admin.UsersUpdateResponse, error) {
	var res *admin.UsersUpdateResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}
