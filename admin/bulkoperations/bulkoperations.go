// Copyright 2022 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package bulkoperations implements the DocuSign SDK
// category BulkOperations.
//
// Methods to import and export users and accounts.
//
// Service Api documentation may be found at:
// https://developers.docusign.com/docs/admin-api/reference/BulkOperations
// Usage example:
//
//	import (
//	    "github.com/jfcote87/esign"
//	    "github.com/jfcote87/esign/admin"
//	)
//	...
//	bulkoperationsService := bulkoperations.New(esignCredential)
package bulkoperations // import "github.com/jfcote87/esignadmin/bulkoperations"

import (
	"context"
	"io"
	"net/url"
	"strings"

	"github.com/jfcote87/esign"
	"github.com/jfcote87/esign/admin"
)

// Service implements DocuSign BulkOperations API operations
type Service struct {
	credential esign.Credential
}

// New initializes a bulkoperations service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// CreateAccountSettingsExport creates a  new account settings export request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/accountsettingsexport/createaccountsettingsexport
//
// SDK Method BulkOperations::createAccountSettingsExport
func (s *Service) CreateAccountSettingsExport(organizationID string, request *admin.OrganizationAccountsRequest) *CreateAccountSettingsExportOp {
	return &CreateAccountSettingsExportOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "exports", "account_settings"}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// CreateAccountSettingsExportOp implements DocuSign API SDK BulkOperations::createAccountSettingsExport
type CreateAccountSettingsExportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateAccountSettingsExportOp) Do(ctx context.Context) (*admin.OrganizationExportResponse, error) {
	var res *admin.OrganizationExportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// DeleteAccountSettingsExport deletes a single account settings export request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/accountsettingsexport/deleteaccountsettingsexport
//
// SDK Method BulkOperations::deleteAccountSettingsExport
func (s *Service) DeleteAccountSettingsExport(organizationID string, exportID string) *DeleteAccountSettingsExportOp {
	return &DeleteAccountSettingsExportOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "exports", "account_settings", exportID}, "/"),
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// DeleteAccountSettingsExportOp implements DocuSign API SDK BulkOperations::deleteAccountSettingsExport
type DeleteAccountSettingsExportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteAccountSettingsExportOp) Do(ctx context.Context) (map[string]interface{}, error) {
	var res map[string]interface{}
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetAccountSettingsExport returns the results for a single account settings export request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/accountsettingsexport/getaccountsettingsexport
//
// SDK Method BulkOperations::getAccountSettingsExport
func (s *Service) GetAccountSettingsExport(organizationID string, exportID string) *GetAccountSettingsExportOp {
	return &GetAccountSettingsExportOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "exports", "account_settings", exportID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetAccountSettingsExportOp implements DocuSign API SDK BulkOperations::getAccountSettingsExport
type GetAccountSettingsExportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetAccountSettingsExportOp) Do(ctx context.Context) (*admin.OrganizationExportResponse, error) {
	var res *admin.OrganizationExportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetAccountSettingsExports returns a list of pending and completed account settings export request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/accountsettingsexport/getaccountsettingsexports
//
// SDK Method BulkOperations::getAccountSettingsExports
func (s *Service) GetAccountSettingsExports(organizationID string) *GetAccountSettingsExportsOp {
	return &GetAccountSettingsExportsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "exports", "account_settings"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetAccountSettingsExportsOp implements DocuSign API SDK BulkOperations::getAccountSettingsExports
type GetAccountSettingsExportsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetAccountSettingsExportsOp) Do(ctx context.Context) (*admin.OrganizationExportsResponse, error) {
	var res *admin.OrganizationExportsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CreateUserListExport creates a user list export request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userexport/createuserlistexport
//
// SDK Method BulkOperations::createUserListExport
func (s *Service) CreateUserListExport(organizationID string, request *admin.OrganizationExportRequest) *CreateUserListExportOp {
	return &CreateUserListExportOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "exports", "user_list"}, "/"),
		Payload:    request,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// CreateUserListExportOp implements DocuSign API SDK BulkOperations::createUserListExport
type CreateUserListExportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateUserListExportOp) Do(ctx context.Context) (*admin.OrganizationExportResponse, error) {
	var res *admin.OrganizationExportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// DeleteUserListExport deletes a single user list export request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userexport/deleteuserlistexport
//
// SDK Method BulkOperations::deleteUserListExport
func (s *Service) DeleteUserListExport(organizationID string, exportID string) *DeleteUserListExportOp {
	return &DeleteUserListExportOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "exports", "user_list", exportID}, "/"),
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// DeleteUserListExportOp implements DocuSign API SDK BulkOperations::deleteUserListExport
type DeleteUserListExportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteUserListExportOp) Do(ctx context.Context) (map[string]interface{}, error) {
	var res map[string]interface{}
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetUserListExport returns the results for single user list export request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userexport/getuserlistexport
//
// SDK Method BulkOperations::getUserListExport
func (s *Service) GetUserListExport(organizationID string, exportID string) *GetUserListExportOp {
	return &GetUserListExportOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "exports", "user_list", exportID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetUserListExportOp implements DocuSign API SDK BulkOperations::getUserListExport
type GetUserListExportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetUserListExportOp) Do(ctx context.Context) (*admin.OrganizationExportResponse, error) {
	var res *admin.OrganizationExportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetUserListExports returns a list of pending and completed export requests.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userexport/getuserlistexports
//
// SDK Method BulkOperations::getUserListExports
func (s *Service) GetUserListExports(organizationID string) *GetUserListExportsOp {
	return &GetUserListExportsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "exports", "user_list"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetUserListExportsOp implements DocuSign API SDK BulkOperations::getUserListExports
type GetUserListExportsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetUserListExportsOp) Do(ctx context.Context) (*admin.OrganizationExportsResponse, error) {
	var res *admin.OrganizationExportsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// AddBulkAccountSettingsImport creates a new account settings import request.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/accountsettingsimport/addbulkaccountsettingsimport
//
// SDK Method BulkOperations::addBulkAccountSettingsImport
func (s *Service) AddBulkAccountSettingsImport(organizationID string, media io.Reader, mimeType string) *AddBulkAccountSettingsImportOp {
	return &AddBulkAccountSettingsImportOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "account_settings"}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// AddBulkAccountSettingsImportOp implements DocuSign API SDK BulkOperations::addBulkAccountSettingsImport
type AddBulkAccountSettingsImportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *AddBulkAccountSettingsImportOp) Do(ctx context.Context) (*admin.OrganizationAccountSettingsImportResponse, error) {
	var res *admin.OrganizationAccountSettingsImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// DeleteBulkAccountSettingsImport deletes a Bulk Account Settings Import request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/accountsettingsimport/deletebulkaccountsettingsimport
//
// SDK Method BulkOperations::deleteBulkAccountSettingsImport
func (s *Service) DeleteBulkAccountSettingsImport(organizationID string, importID string) *DeleteBulkAccountSettingsImportOp {
	return &DeleteBulkAccountSettingsImportOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "account_settings", importID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// DeleteBulkAccountSettingsImportOp implements DocuSign API SDK BulkOperations::deleteBulkAccountSettingsImport
type DeleteBulkAccountSettingsImportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteBulkAccountSettingsImportOp) Do(ctx context.Context) (map[string]interface{}, error) {
	var res map[string]interface{}
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetBulkAccountSettingsImport returns the details/metadata for a Bulk Account Settings Import request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/accountsettingsimport/getbulkaccountsettingsimport
//
// SDK Method BulkOperations::getBulkAccountSettingsImport
func (s *Service) GetBulkAccountSettingsImport(organizationID string, importID string) *GetBulkAccountSettingsImportOp {
	return &GetBulkAccountSettingsImportOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "account_settings", importID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetBulkAccountSettingsImportOp implements DocuSign API SDK BulkOperations::getBulkAccountSettingsImport
type GetBulkAccountSettingsImportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetBulkAccountSettingsImportOp) Do(ctx context.Context) (*admin.OrganizationAccountSettingsImportResponse, error) {
	var res *admin.OrganizationAccountSettingsImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetBulkAccountSettingsImports returns the details and metadata for Bulk Account Settings Import requests in the organization.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/accountsettingsimport/getbulkaccountsettingsimports
//
// SDK Method BulkOperations::getBulkAccountSettingsImports
func (s *Service) GetBulkAccountSettingsImports(organizationID string) *GetBulkAccountSettingsImportsOp {
	return &GetBulkAccountSettingsImportsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "account_settings"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetBulkAccountSettingsImportsOp implements DocuSign API SDK BulkOperations::getBulkAccountSettingsImports
type GetBulkAccountSettingsImportsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetBulkAccountSettingsImportsOp) Do(ctx context.Context) ([]interface{}, error) {
	var res []interface{}
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CreateBulkImportSingleAccountAddUsersRequest import request for adding user to a single account within the organization.
//
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/singleaccountuserimport/createbulkimportsingleaccountaddusersrequest
//
// SDK Method BulkOperations::createBulkImportSingleAccountAddUsersRequest
func (s *Service) CreateBulkImportSingleAccountAddUsersRequest(organizationID string, media io.Reader, mimeType string) *CreateBulkImportSingleAccountAddUsersRequestOp {
	return &CreateBulkImportSingleAccountAddUsersRequestOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "accounts", "{accountId}", "imports", "bulk_users", "add"}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// CreateBulkImportSingleAccountAddUsersRequestOp implements DocuSign API SDK BulkOperations::createBulkImportSingleAccountAddUsersRequest
type CreateBulkImportSingleAccountAddUsersRequestOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateBulkImportSingleAccountAddUsersRequestOp) Do(ctx context.Context) (*admin.OrganizationImportResponse, error) {
	var res *admin.OrganizationImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CreateBulkImportSingleAccountUpdateUsersRequest import request for updating users for a single account
// within the organization.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/singleaccountuserimport/createbulkimportsingleaccountupdateusersrequest
//
// SDK Method BulkOperations::createBulkImportSingleAccountUpdateUsersRequest
func (s *Service) CreateBulkImportSingleAccountUpdateUsersRequest(organizationID string, media io.Reader, mimeType string) *CreateBulkImportSingleAccountUpdateUsersRequestOp {
	return &CreateBulkImportSingleAccountUpdateUsersRequestOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "accounts", "{accountId}", "imports", "bulk_users", "update"}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// CreateBulkImportSingleAccountUpdateUsersRequestOp implements DocuSign API SDK BulkOperations::createBulkImportSingleAccountUpdateUsersRequest
type CreateBulkImportSingleAccountUpdateUsersRequestOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateBulkImportSingleAccountUpdateUsersRequestOp) Do(ctx context.Context) (*admin.OrganizationImportResponse, error) {
	var res *admin.OrganizationImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// AddBulkUserImport creates a request to import new users into an account.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userimport/addbulkuserimport
//
// SDK Method BulkOperations::addBulkUserImport
func (s *Service) AddBulkUserImport(organizationID string, media io.Reader, mimeType string) *AddBulkUserImportOp {
	return &AddBulkUserImportOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "bulk_users", "add"}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// AddBulkUserImportOp implements DocuSign API SDK BulkOperations::addBulkUserImport
type AddBulkUserImportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *AddBulkUserImportOp) Do(ctx context.Context) (*admin.OrganizationImportResponse, error) {
	var res *admin.OrganizationImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CloseBulkExternalUserImportRequest closes external memberships.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userimport/closebulkexternaluserimportrequest
//
// SDK Method BulkOperations::closeBulkExternalUserImportRequest
func (s *Service) CloseBulkExternalUserImportRequest(organizationID string, media io.Reader, mimeType string) *CloseBulkExternalUserImportRequestOp {
	return &CloseBulkExternalUserImportRequestOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "bulk_users", "close_external"}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// CloseBulkExternalUserImportRequestOp implements DocuSign API SDK BulkOperations::closeBulkExternalUserImportRequest
type CloseBulkExternalUserImportRequestOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CloseBulkExternalUserImportRequestOp) Do(ctx context.Context) (*admin.OrganizationImportResponse, error) {
	var res *admin.OrganizationImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CloseBulkUserImportRequest creates a request to close the accounts of existing users.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userimport/closebulkuserimportrequest
//
// SDK Method BulkOperations::closeBulkUserImportRequest
func (s *Service) CloseBulkUserImportRequest(organizationID string, media io.Reader, mimeType string) *CloseBulkUserImportRequestOp {
	return &CloseBulkUserImportRequestOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "bulk_users", "close"}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// CloseBulkUserImportRequestOp implements DocuSign API SDK BulkOperations::closeBulkUserImportRequest
type CloseBulkUserImportRequestOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CloseBulkUserImportRequestOp) Do(ctx context.Context) (*admin.OrganizationImportResponse, error) {
	var res *admin.OrganizationImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// DeleteBulkUserImport deletes a specific user import request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userimport/deletebulkuserimport
//
// SDK Method BulkOperations::deleteBulkUserImport
func (s *Service) DeleteBulkUserImport(organizationID string, importID string) *DeleteBulkUserImportOp {
	return &DeleteBulkUserImportOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "bulk_users", importID}, "/"),
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// DeleteBulkUserImportOp implements DocuSign API SDK BulkOperations::deleteBulkUserImport
type DeleteBulkUserImportOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteBulkUserImportOp) Do(ctx context.Context) (map[string]interface{}, error) {
	var res map[string]interface{}
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetBulkUserImportCSV given the ID of a user import request,
// return the CSV file that was imported.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userimport/getbulkuserimportcsv
//
// SDK Method BulkOperations::getBulkUserImportCSV
func (s *Service) GetBulkUserImportCSV(organizationID string, importID string) *GetBulkUserImportCSVOp {
	return &GetBulkUserImportCSVOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "bulk_users", importID, "results_csv"}, "/"),
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetBulkUserImportCSVOp implements DocuSign API SDK BulkOperations::getBulkUserImportCSV
type GetBulkUserImportCSVOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetBulkUserImportCSVOp) Do(ctx context.Context) (map[string]interface{}, error) {
	var res map[string]interface{}
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetBulkUserImportRequest returns the details of a single user import request.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userimport/getbulkuserimportrequest
//
// SDK Method BulkOperations::getBulkUserImportRequest
func (s *Service) GetBulkUserImportRequest(organizationID string, importID string) *GetBulkUserImportRequestOp {
	return &GetBulkUserImportRequestOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "bulk_users", importID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetBulkUserImportRequestOp implements DocuSign API SDK BulkOperations::getBulkUserImportRequest
type GetBulkUserImportRequestOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetBulkUserImportRequestOp) Do(ctx context.Context) (*admin.OrganizationImportResponse, error) {
	var res *admin.OrganizationImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetBulkUserImportRequests gets a list of all of the user import requests.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userimport/getbulkuserimportrequests
//
// SDK Method BulkOperations::getBulkUserImportRequests
func (s *Service) GetBulkUserImportRequests(organizationID string) *GetBulkUserImportRequestsOp {
	return &GetBulkUserImportRequestsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "bulk_users"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// GetBulkUserImportRequestsOp implements DocuSign API SDK BulkOperations::getBulkUserImportRequests
type GetBulkUserImportRequestsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetBulkUserImportRequestsOp) Do(ctx context.Context) (*admin.OrganizationImportsResponse, error) {
	var res *admin.OrganizationImportsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// UpdateBulkUserImports bulk updates information for existing users.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/docs/admin-api/reference/bulkoperations/userimport/updatebulkuserimports
//
// SDK Method BulkOperations::updateBulkUserImports
func (s *Service) UpdateBulkUserImports(organizationID string, media io.Reader, mimeType string) *UpdateBulkUserImportsOp {
	return &UpdateBulkUserImportsOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"", "v2", "organizations", organizationID, "imports", "bulk_users", "update"}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.AdminV2,
	}
}

// UpdateBulkUserImportsOp implements DocuSign API SDK BulkOperations::updateBulkUserImports
type UpdateBulkUserImportsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UpdateBulkUserImportsOp) Do(ctx context.Context) (*admin.OrganizationImportResponse, error) {
	var res *admin.OrganizationImportResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}
