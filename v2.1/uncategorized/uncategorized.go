// Copyright 2022 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package uncategorized implements the DocuSign SDK
// category Uncategorized.
//
// Uncategorized calls may change or move to other packages.
//
// Usage example:
//
//	import (
//	    "github.com/jfcote87/esign"
//	    "github.com/jfcote87/esign/v2.1/model"
//	)
//	...
//	uncategorizedService := uncategorized.New(esignCredential)
package uncategorized // import "github.com/jfcote87/esignv2.1/uncategorized"

import (
	"context"
	"net/url"
	"strings"

	"github.com/jfcote87/esign"
	"github.com/jfcote87/esign/v2.1/model"
)

// Service implements DocuSign Uncategorized API operations
type Service struct {
	credential esign.Credential
}

// New initializes a uncategorized service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// CreateUserAuthorization creates a user authorization.
// operation is uncategorized and subject to change.
func (s *Service) CreateUserAuthorization(userID string, userAuthorizationCreateRequest *model.UserAuthorizationCreateRequest) *CreateUserAuthorizationOp {
	return &CreateUserAuthorizationOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"users", userID, "authorization"}, "/"),
		Payload:    userAuthorizationCreateRequest,
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// CreateUserAuthorizationOp implements DocuSign API SDK Uncategorized::createUserAuthorization
type CreateUserAuthorizationOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateUserAuthorizationOp) Do(ctx context.Context) (*model.UserAuthorization, error) {
	var res *model.UserAuthorization
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CreateUserAuthorizations create or update multiple user authorizations.
// operation is uncategorized and subject to change.
func (s *Service) CreateUserAuthorizations(userID string, userAuthorizationsRequest *model.UserAuthorizationsRequest) *CreateUserAuthorizationsOp {
	return &CreateUserAuthorizationsOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       strings.Join([]string{"users", userID, "authorizations"}, "/"),
		Payload:    userAuthorizationsRequest,
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// CreateUserAuthorizationsOp implements DocuSign API SDK Uncategorized::createUserAuthorizations
type CreateUserAuthorizationsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateUserAuthorizationsOp) Do(ctx context.Context) (*model.UserAuthorizationsResponse, error) {
	var res *model.UserAuthorizationsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// DeleteUserAuthorization deletes the user authorization.
//
// operation is uncategorized and subject to change.
func (s *Service) DeleteUserAuthorization(authorizationID string, userID string) *DeleteUserAuthorizationOp {
	return &DeleteUserAuthorizationOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"users", userID, "authorization", authorizationID}, "/"),
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// DeleteUserAuthorizationOp implements DocuSign API SDK Uncategorized::deleteUserAuthorization
type DeleteUserAuthorizationOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteUserAuthorizationOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// DeleteUserAuthorizations delete multiple user authorizations.
// operation is uncategorized and subject to change.
func (s *Service) DeleteUserAuthorizations(userID string, userAuthorizationsDeleteRequest *model.UserAuthorizationsDeleteRequest) *DeleteUserAuthorizationsOp {
	return &DeleteUserAuthorizationsOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"users", userID, "authorizations"}, "/"),
		Payload:    userAuthorizationsDeleteRequest,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// DeleteUserAuthorizationsOp implements DocuSign API SDK Uncategorized::deleteUserAuthorizations
type DeleteUserAuthorizationsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteUserAuthorizationsOp) Do(ctx context.Context) (*model.UserAuthorizationsDeleteResponse, error) {
	var res *model.UserAuthorizationsDeleteResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetAgentUserAuthorizations returns the authorizations for which the specified user is the agent user.
// operation is uncategorized and subject to change.
func (s *Service) GetAgentUserAuthorizations(userID string) *GetAgentUserAuthorizationsOp {
	return &GetAgentUserAuthorizationsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"users", userID, "authorizations", "agent"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// GetAgentUserAuthorizationsOp implements DocuSign API SDK Uncategorized::getAgentUserAuthorizations
type GetAgentUserAuthorizationsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetAgentUserAuthorizationsOp) Do(ctx context.Context) (*model.UserAuthorizations, error) {
	var res *model.UserAuthorizations
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ActiveOnly when **true,** only active users are returned. The default value is **false.**
func (op *GetAgentUserAuthorizationsOp) ActiveOnly(val string) *GetAgentUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("active_only", val)
	}
	return op
}

// Count is the maximum number of results to return.
func (op *GetAgentUserAuthorizationsOp) Count(val string) *GetAgentUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("count", val)
	}
	return op
}

// EmailSubstring filters returned user records by full email address or a substring of email address.
func (op *GetAgentUserAuthorizationsOp) EmailSubstring(val string) *GetAgentUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("email_substring", val)
	}
	return op
}

// IncludeClosedUsers when **true,** returns active and scheduled authorizations of closed users. The default value is **true.** This value is only applied when `active_only` is **false.**
func (op *GetAgentUserAuthorizationsOp) IncludeClosedUsers(val string) *GetAgentUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("include_closed_users", val)
	}
	return op
}

// Permissions set the call query parameter permissions
func (op *GetAgentUserAuthorizationsOp) Permissions(val string) *GetAgentUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("permissions", val)
	}
	return op
}

// StartPosition is the position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
func (op *GetAgentUserAuthorizationsOp) StartPosition(val string) *GetAgentUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("start_position", val)
	}
	return op
}

// UserNameSubstring filters results based on a full or partial user name.
//
// **Note:** When you enter a partial user name, you do not use a wildcard character.
func (op *GetAgentUserAuthorizationsOp) UserNameSubstring(val string) *GetAgentUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("user_name_substring", val)
	}
	return op
}

// GetPrincipalUserAuthorizations returns the authorizations for which the specified user is the principal user.
// operation is uncategorized and subject to change.
func (s *Service) GetPrincipalUserAuthorizations(userID string) *GetPrincipalUserAuthorizationsOp {
	return &GetPrincipalUserAuthorizationsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"users", userID, "authorizations"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// GetPrincipalUserAuthorizationsOp implements DocuSign API SDK Uncategorized::getPrincipalUserAuthorizations
type GetPrincipalUserAuthorizationsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetPrincipalUserAuthorizationsOp) Do(ctx context.Context) (*model.UserAuthorizations, error) {
	var res *model.UserAuthorizations
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ActiveOnly when **true,** return only active authorizations. The default value is **true.**
func (op *GetPrincipalUserAuthorizationsOp) ActiveOnly(val string) *GetPrincipalUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("active_only", val)
	}
	return op
}

// Count is the maximum number of results to return.
func (op *GetPrincipalUserAuthorizationsOp) Count(val string) *GetPrincipalUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("count", val)
	}
	return op
}

// EmailSubstring filters returned user records by full email address or a substring of email address.
func (op *GetPrincipalUserAuthorizationsOp) EmailSubstring(val string) *GetPrincipalUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("email_substring", val)
	}
	return op
}

// IncludeClosedUsers when **true,** returns active and scheduled authorizations of closed users. The default value is **true.** This value is only applied when `active_only` is **false.**
func (op *GetPrincipalUserAuthorizationsOp) IncludeClosedUsers(val string) *GetPrincipalUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("include_closed_users", val)
	}
	return op
}

// Permissions filters results by authorization permission. Valid values:
// * `Send`
// * `Manage`
// * `Sign`
func (op *GetPrincipalUserAuthorizationsOp) Permissions(val string) *GetPrincipalUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("permissions", val)
	}
	return op
}

// StartPosition is the position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
func (op *GetPrincipalUserAuthorizationsOp) StartPosition(val string) *GetPrincipalUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("start_position", val)
	}
	return op
}

// UserNameSubstring filters results based on a full or partial user name.
//
// **Note:** When you enter a partial user name, you do not use a wildcard character.
func (op *GetPrincipalUserAuthorizationsOp) UserNameSubstring(val string) *GetPrincipalUserAuthorizationsOp {
	if op != nil {
		op.QueryOpts.Set("user_name_substring", val)
	}
	return op
}

// GetUserAuthorization returns the user authorization for a given authorization ID.
//
// operation is uncategorized and subject to change.
func (s *Service) GetUserAuthorization(authorizationID string, userID string) *GetUserAuthorizationOp {
	return &GetUserAuthorizationOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"users", userID, "authorization", authorizationID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// GetUserAuthorizationOp implements DocuSign API SDK Uncategorized::getUserAuthorization
type GetUserAuthorizationOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetUserAuthorizationOp) Do(ctx context.Context) (*model.UserAuthorization, error) {
	var res *model.UserAuthorization
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// UpdateUserAuthorization updates the start or end date for a user authorization.
// operation is uncategorized and subject to change.
func (s *Service) UpdateUserAuthorization(authorizationID string, userID string, userAuthorizationUpdateRequest *model.UserAuthorizationUpdateRequest) *UpdateUserAuthorizationOp {
	return &UpdateUserAuthorizationOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"users", userID, "authorization", authorizationID}, "/"),
		Payload:    userAuthorizationUpdateRequest,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// UpdateUserAuthorizationOp implements DocuSign API SDK Uncategorized::updateUserAuthorization
type UpdateUserAuthorizationOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UpdateUserAuthorizationOp) Do(ctx context.Context) (*model.UserAuthorization, error) {
	var res *model.UserAuthorization
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// GetEnvelopeDocGenFormFields returns sender fields for an envelope.
// operation is uncategorized and subject to change.
func (s *Service) GetEnvelopeDocGenFormFields(envelopeID string) *GetEnvelopeDocGenFormFieldsOp {
	return &GetEnvelopeDocGenFormFieldsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"envelopes", envelopeID, "docGenFormFields"}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// GetEnvelopeDocGenFormFieldsOp implements DocuSign API SDK Uncategorized::getEnvelopeDocGenFormFields
type GetEnvelopeDocGenFormFieldsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetEnvelopeDocGenFormFieldsOp) Do(ctx context.Context) (*model.DocGenFormFieldResponse, error) {
	var res *model.DocGenFormFieldResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// UpdateEnvelopeDocGenFormFields updates sender fields for an envelope.
// operation is uncategorized and subject to change.
func (s *Service) UpdateEnvelopeDocGenFormFields(envelopeID string, docGenFormFieldRequest *model.DocGenFormFieldRequest) *UpdateEnvelopeDocGenFormFieldsOp {
	return &UpdateEnvelopeDocGenFormFieldsOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"envelopes", envelopeID, "docGenFormFields"}, "/"),
		Payload:    docGenFormFieldRequest,
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// UpdateEnvelopeDocGenFormFieldsOp implements DocuSign API SDK Uncategorized::updateEnvelopeDocGenFormFields
type UpdateEnvelopeDocGenFormFieldsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UpdateEnvelopeDocGenFormFieldsOp) Do(ctx context.Context) (*model.DocGenFormFieldResponse, error) {
	var res *model.DocGenFormFieldResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// UpdateDocgenFormfieldsOnly when **false** or omitted,
// the documents are updated.
//
// When **true,** only the form fields are updated. The documents are unchanged.
func (op *UpdateEnvelopeDocGenFormFieldsOp) UpdateDocgenFormfieldsOnly(val string) *UpdateEnvelopeDocGenFormFieldsOp {
	if op != nil {
		op.QueryOpts.Set("update_docgen_formfields_only", val)
	}
	return op
}
